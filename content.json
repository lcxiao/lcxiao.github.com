{"meta":{"title":"Lcxiao's blog","subtitle":"","description":"","author":"lcxiao","url":"http://yoursite.com","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-05-06T13:52:17.034Z","updated":"2020-05-06T13:52:17.030Z","comments":false,"path":"/404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":""},{"title":"about","date":"2020-05-05T23:04:57.000Z","updated":"2020-05-06T15:16:55.503Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"hello"},{"title":"categories","date":"2020-05-06T02:30:38.000Z","updated":"2020-05-06T15:16:55.503Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"lifestyle","date":"2020-05-06T05:41:12.000Z","updated":"2020-05-06T13:41:12.579Z","comments":true,"path":"lifestyle/index.html","permalink":"http://yoursite.com/lifestyle/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-05-06T04:23:56.000Z","updated":"2020-05-06T13:28:24.655Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux内核模块及功能","slug":"Linux内核模块及功能","date":"2020-06-19T06:49:19.000Z","updated":"2020-06-19T14:49:36.765Z","comments":true,"path":"2020/06/19/Linux内核模块及功能/","link":"","permalink":"http://yoursite.com/2020/06/19/Linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E5%8F%8A%E5%8A%9F%E8%83%BD/","excerpt":"","text":"CentOS启动流程–POST–Bootloader（BIOS，MBR）–kernel – rootfs —switch root–sbin/initldd 打印共享依赖库ldd /bin/ls | grep -o &quot;/lib[^[:space:]]*&quot; 内核设计体系：单内核、微内核linux：单内核设计，但充分借鉴了微内核设计体系的设计有点，为内核引入了模块化机制； 内核的组成部分：kernel：内核核心，一般为bzimage，通常位于/boot目录、名称为vmlinuz-VERSION-release; kernel object：内核对象，即内核模块、一般防止与/lib/modules/VERSION-release/ 内核模块与内核核心版本一定要严格匹配； [ ]：N [M]：Module [*]：Y、编译至内核核心 内核模块：动态装载和卸载；ramdisk ：辅助性文件，并非必须的，这取决与内核是否能直接驱动rootfs所在的设备； 目标设备驱动，例如SCSI设备的驱动； 逻辑设备驱动，例如LVM设备的驱动 文件系统，例如xfs文件系统； ramdisk：是一个简装版的根文件系统；（运行与内存的系统） 下一步要做跟切换，持久化内核信息获取：uname ：print system information-a ：all -r ：release号，发行号 -m ：machine 平台架构 -n ：当前主机名模块信息获取： lsmod显示当前系统的 modinfo显示模块详细信息；-F field ：仅显示指定字段的信息-n 显示文件路径 modprobe实现模块动态装载卸载默认是/etc/modprobe.conf格式:modprobe MODULE_NAME 装载模块modprobe -r MODULE_NAME ：卸载模块 不要随便卸载模块，除非你知道自己在做什么； depmod生成modules.dep和map文件；内核模块依赖关系生成的工具； 模块的装载和卸载的另一组命令：insmode insmode [filename] [module options...] filename :模块的文件路径rmmodermmod btrfs` rmmod [-f] [-s] [-v] [modulename] ramdisk 文件的管理； mkinitrd 为使用中的内核重新制作ramfs文件； –with=：除了默认的模块之外需要装载至initramfs中的模块 –preload=:initramfs所提供的模块需要预先装载的模块； mkinitrd /boot/initramfs-$(uname -r) $(uname -r) dracut 较为底层的制作initramfs文件的工具（选项较多，强大） dracut [option…] []例：dracut initramfs-$(uname -r).img $(uname -r) 操作系统上的两个伪文件系统：/proc 内核状态及统计信息的输出接口；同时，还提供了一个配置接口：/proc/sys 参数： 只读；信息输出/proc/#/* 可写：可接受用户指定的一个“新值“来实现对内核某功能和特性的配置；/proc/sys /sys 调优就是改这里的参数必须充分理解内核各项参数 不应该使用文本编辑器命令去编辑而是应该使用重定向的方式去覆盖里面的值 sysctl ：专用的命令 sysctl net.ipv4.ip_forwardsysctl -w net.ipv4.ip_forward=1 sysctl -a ：显示所有可修改的值； sysctl variable； 对用/proc/sys目录下有对应关系的文件 修改其值： #sysctl -w variable=value 写入 -p ：从指定文件中加载；默认是/etc/sysctl.conf 直接sysctl -p 就可以，必要时可以添加文件路径； 文件系统命令 查看：cat /proc/sys/net/ipv4/ip_forward 设定：echo “VALUE” &gt; /proc/sys/net/ipv4/ip_forward 注意，这两种方式设定的只是当前有效，重启失效要永久有效必须保存至文件/etc/sysctl.conf 、/etc/sysctl.d/*.conf 内核参数：核心转发/proc/sys/net/ipv4/ip_forward vm.drop_cache 缓存的内存 （0、1、2） kernel.hostname 主机名 /proc/sys/net/ipv4/icmp_echo_ignore_all 忽略ping操作 sysfs ：/sys 目录输出内核识别出的各硬件设备的相关属性信息，也有内核对硬件特性的可设置参数，对此些参数的修改，即可定制硬件设备工作特性； udev：通过读取/sys目录下的硬件设备信息，按需为硬件设备创建设备文件；udev 是用户空间程序；正是/sys的存在才能创建设备 专用工具：devadminhotplugudev为设备创建设备文件时，会读取事先定义好的规则文件，一般在/etc/udev/rules.d/目录下，以及/usr/lib/udev/rules.d/","categories":[],"tags":[]},{"title":"21.Linux内核模块及功能","slug":"21-Linux内核模块及功能","date":"2020-06-15T05:11:53.000Z","updated":"2020-06-15T13:12:04.368Z","comments":true,"path":"2020/06/15/21-Linux内核模块及功能/","link":"","permalink":"http://yoursite.com/2020/06/15/21-Linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E5%8F%8A%E5%8A%9F%E8%83%BD/","excerpt":"","text":"CentOS启动流程–POST–Bootloader（BIOS，MBR）–kernel – rootfs —switch root–sbin/initldd 打印共享依赖库ldd /bin/ls | grep -o “/lib[^[:space:]]*” 内核设计体系：单内核、微内核linux：单内核设计，但充分借鉴了微内核设计体系的设计有点，为内核引入了模块化机制； 内核的组成部分：kernel：内核核心，一般为bzimage，通常位于/boot目录、名称为vmlinuz-VERSION-release; kernel object：内核对象，即内核模块、一般防止与/lib/modules/VERSION-release/ 内核模块与内核核心版本一定要严格匹配； [ ]：N [M]：Module [*]：Y、编译至内核核心 内核模块：动态装载和卸载；ramdisk ：辅助性文件，并非必须的，这取决与内核是否能直接驱动rootfs所在的设备； 目标设备驱动，例如SCSI设备的驱动； 逻辑设备驱动，例如LVM设备的驱动 文件系统，例如xfs文件系统； ramdisk：是一个简装版的根文件系统；（运行与内存的系统） 下一步要做跟切换，持久化内核信息获取：uname ：print system information-a ：all -r ：release号，发行号 -m ：machine 平台架构 -n ：当前主机名模块信息获取： lsmod显示当前系统的 modinfo显示模块详细信息；-F field ：仅显示指定字段的信息-n 显示文件路径 modprobe实现模块动态装载卸载默认是/etc/modprobe.conf格式:modprobe MODULE_NAME 装载模块modprobe -r MODULE_NAME ：卸载模块 不要随便卸载模块，除非你知道自己在做什么； depmod生成modules.dep和map文件；内核模块依赖关系生成的工具； 模块的装载和卸载的另一组命令：insmode insmode [filename] [module options...] filename :模块的文件路径rmmodermmod btrfs` rmmod [-f] [-s] [-v] [modulename] ramdisk 文件的管理； mkinitrd 为使用中的内核重新制作ramfs文件； –with=：除了默认的模块之外需要装载至initramfs中的模块 –preload=:initramfs所提供的模块需要预先装载的模块； mkinitrd /boot/initramfs-$(uname -r) $(uname -r) dracut 较为底层的制作initramfs文件的工具（选项较多，强大） dracut [option…] []例：dracut initramfs-$(uname -r).img $(uname -r) 操作系统上的两个伪文件系统：/proc 内核状态及统计信息的输出接口；同时，还提供了一个配置接口：/proc/sys 参数： 只读；信息输出/proc/#/* 可写：可接受用户指定的一个“新值“来实现对内核某功能和特性的配置；/proc/sys /sys 调优就是改这里的参数必须充分理解内核各项参数 不应该使用文本编辑器命令去编辑而是应该使用重定向的方式去覆盖里面的值 sysctl ：专用的命令 sysctl net.ipv4.ip_forwardsysctl -w net.ipv4.ip_forward=1 sysctl -a ：显示所有可修改的值； sysctl variable； 对用/proc/sys目录下有对应关系的文件 修改其值： #sysctl -w variable=value 写入 -p ：从指定文件中加载；默认是/etc/sysctl.conf 直接sysctl -p 就可以，必要时可以添加文件路径； 文件系统命令 查看：cat /proc/sys/net/ipv4/ip_forward 设定：echo “VALUE” &gt; /proc/sys/net/ipv4/ip_forward 注意，这两种方式设定的只是当前有效，重启失效要永久有效必须保存至文件/etc/sysctl.conf 、/etc/sysctl.d/*.conf 内核参数：核心转发/proc/sys/net/ipv4/ip_forward vm.drop_cache 缓存的内存 （0、1、2） kernel.hostname 主机名 /proc/sys/net/ipv4/icmp_echo_ignore_all 忽略ping操作 sysfs ：/sys 目录输出内核识别出的各硬件设备的相关属性信息，也有内核对硬件特性的可设置参数，对此些参数的修改，即可定制硬件设备工作特性； udev：通过读取/sys目录下的硬件设备信息，按需为硬件设备创建设备文件；udev 是用户空间程序；正是/sys的存在才能创建设备 专用工具：devadminhotplugudev为设备创建设备文件时，会读取事先定义好的规则文件，一般在/etc/udev/rules.d/目录下，以及/usr/lib/udev/rules.d/","categories":[],"tags":[]},{"title":"20.grub系统配置与使用","slug":"20-grub系统配置与使用","date":"2020-06-15T05:11:21.000Z","updated":"2020-06-15T13:11:36.006Z","comments":true,"path":"2020/06/15/20-grub系统配置与使用/","link":"","permalink":"http://yoursite.com/2020/06/15/20-grub%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/","excerpt":"","text":"GRUB （Boot Loader）grub0.x grub legacy stage1 MBR stage1.5 MBR之后的扇区，让stage1中的bootloader能识别stage2所在的分区上的文件系统 stage2 磁盘分区（/boot/grub） 配置文件：/boot/grub/grub.conf &lt;-- /etc/grub.conf stage2及内核通常防止与一个基本磁盘分区；功用： 提供一个菜单、并提供交互式接口 e：编辑模式，用于编辑菜单： c：命令模式，交互式接口 加载用户选择的内核或操作系统 允许传递参数给内核 可隐藏此菜单 为菜单提供了包含机制 为编辑菜单进行认证 为启用内核或操作系统进行认证 grep的命令行接口help ：获取帮助列表help keyword：详细帮助信息find （hd0，0）/PATH/TO/FILEroot （hd#，#）设置为grub的根kernel /PATH/TO/KERNEL_FILE ：设定本次启动时用到的内核文件；initrd /PATH/TO/INITRAMFS_FILE:设定为选定的内核提供额外文件的ramdisk：boot：引导启动选定的内核 手动在grub命令行接口启动系统：grub&gt;root (hd#,#)grub&gt; kernel /vmlinux—grub&gt; initrd /initramfs—grub&gt; boot 配置文件/boot/grub/grub.conf 配置项： default=#：设定默认启动的菜单项：落单项（title）编号从0开始； timeout=#:指定菜单项等待选项选择的时长； splashimage=（hd#，#）/PATH/TO/XPM_PIC_FILE ：指明菜单背景图片的文件路径； hideenmenu：隐藏菜单 title TITLE：定义菜单项”标题“，可出现多次，引导多个不同的内核 root（hd#，#） ：grub查找stage2及kernel文件所在设备分区：为grub的根； kernel /PATH/TO/VMLINUZ_FILE :启动的内核 initrd /PATH/TO/initramfs :内核匹配的ramfs文件； password [–md5] STRING :启动选定的内核或操作系统时进行认证； grub-md5-crypt 命令输入两次密码后生成一个加密字符串，拷贝至grub配置文件中； 进入单用户模式： 编辑grub菜单（选定要编辑的title，而后使用e命令）； 在选定的kernrl后附加 1，s，S或single都可以 在kernel所在行，键入b命令； 安装grub：在运行正常的系统grub-install 命令：可以安装到任意磁盘 例如：挂载另一块磁盘来做启动， 为磁盘分区，设置boot分区 /dev/sdb1 根分区/dev/sdb2 挂载分区 mount /dev/sdb1 /mnt/boot – mount /dev/sdb2 /mnt/sysroot grub install –root-directory=/mnt /dev/sdb 在/mnt/boot目录拷贝vmlinuz和initramfs.img文件作为启动内核； 编辑grub配置文件：123456default=0timeout=5title CentOS(test) root (hd0,0) kernel /vmlinuz ro root=/dev/sda1 initrd /initramfs.img 在/mnt/sysroot文件夹下建立FHS标准文件夹，作为根问价您系统，拷贝bash程序和动态依赖库文件到相同目录 mkdir -pv bin sbin mnt home usr lib lib64 proc etc media root … cp /bin/bash /mnt/sysroot/bin ldd /bin/bash cp *.so /mnt/sysroot chroot /mnt/sysrootgrub配置文件中 kernerl /vmlinuz ro root=/dev/sda1 (selinux=0) init=/bin/bash 有点类似于ARClinux安装的流程； 手动修复损坏的grub：(本机的grub) grub-install –root-directory=/ /dev/sda –root-directory=（boot目录的父目录） grub命令提示符下安装（要求有boot目录，且存在stage1，stage1.5文件） grub&gt; root (hd0,0) grub&gt; setup （hd0） grub&gt; exit 进入系统安装光盘，进入救援模式： Rescue installed system 或者ESC键输入linux rescue （类似winPE） –&gt;continue–&gt;挂载在/mnt/sysimage–&gt;shell(start shell) chroot /mnt/sysroot 在命令提示符下grub-install exit –&gt; reboot 练习： 添加硬盘，提供直接单独运行bash系统 破坏本机grub stage1，而后在救援模式下修复之； 为grub设备保护功能； grub的保护passwordgrub-crypt –sha-256 –&gt; grub-cryptgrub-crypt –md5 –&gt; grub-md5-crypt/etc/grub.conf文件增加下面这一行，则启动时如果需要编辑grub选项需要先按P键输入密码password –encrypted ^9^32kwzzX./3WISQ0C 如果在特定title下添加password –encrypted STRING 则选择引导这个内核或者系统时需要先认证； 如： grub-md5-crypt password –md5 STRING 1234567891011121314default=0timeout=5splashimage=(hd0,0)/grub/splash.xpm.gzhiddenmenupassword --md5 $1$OOmpy0$wue.j4urx8NNf6wfQZkmF/ #密码的MD5加密形式title CentOS (2.6.32-754.27.1.el6.x86_64) root (hd0,0) kernel /vmlinuz-2.6.32-754.27.1.el6.x86_64 ro root=/dev/mapper/VolGroup-lv_root rd_NO_LUKS LANG=en_US.UTF-8 rd_NO_MD rd_LVM_LV=VolGroup/lv_swap SYSFONT=latarcyrheb-sun16 crashkernel=auto rd_LVM_LV=VolGroup/lv_root KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet initrd /initramfs-2.6.32-754.27.1.el6.x86_64.imgtitle CentOS 6 (2.6.32-754.el6.x86_64) lock #保护开启 root (hd0,0) kernel /vmlinuz-2.6.32-754.el6.x86_64 ro root=/dev/mapper/VolGroup-lv_root rd_NO_LUKS LANG=en_US.UTF-8 rd_NO_MD rd_LVM_LV=VolGroup/lv_swap SYSFONT=latarcyrheb-sun16 crashkernel=auto rd_LVM_LV=VolGroup/lv_root KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet initrd /initramfs-2.6.32-754.el6.x86_64.img grub-crypt password –sha-256 STRING 在title后面root上一行可以给要保护的启动项添加lock字段，则自动时必须按p键输入密码才能启动； 123456# (0) Arch Linuxtitle Arch Linuxlockroot (hd0,1)kernel &#x2F;boot&#x2F;vmlinuz-linux root&#x3D;&#x2F;dev&#x2F;disk&#x2F;by-label&#x2F;Arch_Linux roinitrd &#x2F;boot&#x2F;initramfs-linux.img 如果boot分区单独分区的话，此分区就是grub的根分区；/vmlinuz/grub/grub.conf 如果没有单独分区的话，这个分区是根，那么vmlinuz文件就是在/boot/vmlinuz/boot/grub/grub.conf grub访问的一般为基本磁盘分区单独分区是因为根文件系统比较复杂； 如何识别设备：hd#，# 两个数字的含义：第几块磁盘，第几个分区；（hd0，0） 第一个磁盘的第一个主分区； grub1.x grub2","categories":[],"tags":[]},{"title":"19.Linux系统启动流程","slug":"19-Linux系统启动流程","date":"2020-06-15T05:10:58.000Z","updated":"2020-06-15T13:11:12.352Z","comments":true,"path":"2020/06/15/19-Linux系统启动流程/","link":"","permalink":"http://yoursite.com/2020/06/15/19-Linux%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/","excerpt":"","text":"系统启动流程Linux系统组成部分：内核，根文件系统内核：进程管理，内存管理、网络协议栈、文件系统、驱动程序、安全功能（加密解密协议栈。selinux） IPC：Inter Process Communication 消息队列、semerphor、shm socket文件系统工作在内核空间 启动分区：/bootrootfs：FHS：/bin /sbin /lib /proc /sys /etcinit 程序– 内核设计流派： 单内核 ：所有功能集成与同一个程序； Linux 微内核 ：每种功能使用一个单独的子系统实现； Windows，Solaris Linux内核特点： 支持模块化 .ko（Kernel Object） 支持模块运行时动态装载或卸载； ramdisk 使用缓存和缓冲来加速对磁盘上的文件访问； Linux内核组成部分： 核心文件 /boot/vmlinuz-VERSION-release 模块文件 /lib/modules/VERSION-release vmlinux —-&gt; ramdisk —-&gt; rootfs内核 – 临时根文件系统 – 切换真正的根文件系统ramdisk：centos5 /boot/initrd-VERSION-release.imgCentOS6,7: /boot/initramfs-VERSION-release.img 模块文件：/lib/modules/VERSION-release PC架构的主机系统启动流程，（MBR）：POST：rom（只读）CMOS –BIOS–basic input output systemROM + RAM加电自检Boot Sequence：启动次序,按次序查找各引导设备；第一个有引导程序的设备即为本次启动要用到的设备；bootloader：引导加载器，程序； windows：ntloader linux： LILO：Linux loader grub ：grand uniform BootLoader grub0.X grub legacy grub1.x grub2功能：提供一个界面，允许用户选择要启动的系统或者不同版本的内核，把用户选定的内核装载到RAM中的特定空间中，解压、展开而后把系统控制权移交给内核； MBR：Master Boot Record 512bytes: 446bytes:bootloader 64bits:fat 2bytes:55AAGRUB: Bootloader:1st stage partition :filesystem driver ,1.5 stage partition : /boot/grub 2nd stage 之后是kernel： 自身初始化： 探测可识别到的所有硬件设备 加载硬件驱动程序；（有可能会借助于ramdisk加载驱动） 以只读方式挂载根文件系统； 运行用户空间的第一个程序；INIT? ramdisk 动态创建； INIT文件类型:SYSV,Upstart,Systemd CentOS5:SysV init 配置文件/etc/inittab CentOS6: Upstart /etc/inittab /etc/init/*.conf CentOS7:Systemd 配置文件：/usr/lib/systemd/system/,/etc/systemd/system注意GPT、UEFI可能不一样？ 安卓手机使用lilo引导 对自己编译的内核来说，ramdisk可以是非必须的，（直接把硬盘驱动编译至内核）可以使用工具创建：CentOS5：mkinitrdcentos6，7initramfs 工具程序dracut ，mkinitrd 系统初始化流程（内核级别）：POST–BootSequence（BIOS）–BootLoader（MBR）–kernel(ramdisk)–rootfs(readonly)–/sbin/init? sbin/init:SysV init:运行级别 （0-6） 0 ：关机 1 单用户级别 root 无需认证 ；维护模式 2 带网络的单用户 启动网络功能，不会启动NFS，维护模式 3 multiuser mode 多用户。完全认证，完整模式 4 预留，未用 5 graphic mode 图形界面 6 重启 默认3 5级别切换 init #级别查看：who -rrunlevel 配置文件： /etc/inittab CentOS5：每行定义一种action以及与之对应的processid：runlevels：action：process id：一个任务的标识符 runleves：在哪些级别启动此任务；#，###，也可以为空，表示所有级别； action：在什么条件下启动此任务； process：任务； action： wait：等待切换至此任务所在的级别时执行一次； respawn：一旦此任务终止，就自动重新启动之； initdefault：设定默认运行级别；此时，process省略； sysinit：设定系统初始化方式，此处一般为指定/etc/rc.d/ec.sysinit脚本； 例如：id：3:initdefault:si::sysinit:/etc/rc.d/ec.sysinitl0:0:wait:/etc/rc.d/rc 0 意味着去启动或关闭/etc/rc.d/rc3.d/目录下的服务脚本所控制服务； K* ：要停止的服务；K##，优先级，数字越小，越是优先关闭；依赖的服务先关闭；而后关闭被依赖的； S：要启动的服务；S##*，优先级，数字越小，越是优先启动，被依赖的服务先启动，而依赖的服务后启动； rc脚本：接受一个运行级别数字为参数；脚本框架:for srv in /etc/rc.d/rc#.d/K*;do $srv stopdone for srv in /etc/rc.d/rc#.d/S*;do $srv startdone /etc/init.d/* 脚本执行方式：service SRV_SCRIPT {start | stop | status |restart}/etc/init.d/SRV_SCRIPT {start | stop |status |restart} Chkconfig 管理这些脚本软连接的管控/etc/init.d /每个服务脚本在各级别下的启动和关闭状态； chkconfig SERVICE on | off脚本文件中 “-” 表示 所有级别全关chkconfig –list 刚添加的脚本还没有创建链接？chkconfig –addchkconfig –del #chkconfig：LLL NN NN LLL：运行级别。NN：开启优先级 NN：关闭优先级#description：说明 修改指定的链接类型chkconfig {–level LEVELS} name 《on | off | reset》默认2345 正常级别下，最后一个启动的服务S99local没有链接至/etc/init.d下的某脚本，而是链接到了/etc/rc.d/rc.local脚本；因此，不方便或者不需写服务脚本的程序期望开机自动运行时，直接放置于此脚本文件中即可； rc.local用户自定义开机运行的程序 tty1：:2345：respawn：/usr/sbin/mingetty tty1mingetty会调用login，打开虚拟终端的程序除了mingetty之外，还有诸如getty等； 系统初始化脚本 /etc/rc.d/rc.sysinit 设置主机名 设置欢迎信息 激活udev和selinux （udev主要是创建设备文件） 挂载/etc/fstab文件中定义的所有文件系统； 检测根文件系统，并以读写方式重新挂载根文件系统； 设置系统时钟 根据/etc/sysctl.conf文件来设置内核参数 激活LVM及软RAID设备 激活swap设备； 加载额外需要的驱动程序； 清理操作 总结（用户空间的启动流程）：/sbin/init (etc/inittab)设置默认运行级别 –&gt; 运行系统初始化脚本 ，完成系统初始化 –&gt; 关闭对应级别下要停止的服务，启动对应级别下需要开启的服务 –&gt; 设置登录终端 –&gt; 【启动图形终端】（可选）； 通读/etc/rc.d/rc.sysinit 文件；搞清楚每一步做了什么？ CentOS6：init程序：upstart，但依然为/sbin/init（/etc/inittab）/etc/init/*.conf /etc/inittab （仅用于定义默认运行级别） 注意：*.conf 为upstart风格的配置文件； rcS.confinit-system-dbus.confstart-ttys.conf CentOS7: Systemd,配置文件：/usr/lib/systemd/system/* , /etc/systemd/system/* systemctl get-defaultsystemctl set-default multi-user.target systemctl status完全兼容SysV脚本机制；因此，service命令依然可用，但是，建议使用systemctl命令来控制服务 systemctl {status | start | stop | restart | reload} SERVICE CentOS系统启动流程；","categories":[],"tags":[]},{"title":"18.SHELL循环","slug":"18-SHELL循环","date":"2020-06-15T05:10:33.000Z","updated":"2020-06-15T13:10:46.593Z","comments":true,"path":"2020/06/15/18-SHELL循环/","link":"","permalink":"http://yoursite.com/2020/06/15/18-SHELL%E5%BE%AA%E7%8E%AF/","excerpt":"","text":"BASH编程顺序执行选择执行 if，case循环执行 for，while，until for循环格式：for VARAIBLE in LIST；do 循环体done while循环：while CONDITION；do 循环体 循环控制变量修正表达式done 进入条件：CONDITION测试为真退出条件：CONDITION测试为假 until循环：（相当于while测试条件加！号）until CONDITION；do 循环体 循环控制变量修正表达式done进入条件：CONDITION测试为假退出条件：CONDITION测试为真 练习：1.求100内偶数之和、100以内奇数之和2、创建10个用户。user101-user110；密码同用户3、打印99乘法表4、打印逆序九九乘法表","categories":[],"tags":[]},{"title":"17.网络客户端工具","slug":"17-网络客户端工具","date":"2020-06-15T05:09:56.000Z","updated":"2020-06-15T13:10:11.070Z","comments":true,"path":"2020/06/15/17-网络客户端工具/","link":"","permalink":"http://yoursite.com/2020/06/15/17-%E7%BD%91%E7%BB%9C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7/","excerpt":"","text":"网络客户端工具ping、lftp、lftpget、wget等 ping命令ICMP： echo request 8 echo reply 0ping 发出echo request命令，返回echo reply； ping [option] DESTINATION -c #：包个数 -I ：接口 -w ：deadline ping命令超时时长； -W ：一次ping操作中， -s ：指定包的大小 hping ：--flood 尽可能的快的发包，压力测试? --fast 快 --faster 比快更快 -i uXtraceroute：跟踪从源主机到目标主机之间经过的网关； ftp命令文件传输协议：put ：上传status：状态bye：退出 lftp命令：取代ftp的命令-p port-u user[,pass] get mgetput mputrm lftpget-c ：继续之前的下载 wget非交互式的资源下载器：功能强大wget [option]… [URL]…-b：后台下载-q |–quiet 静默下载（不显示下载进度）-O file ：指明下载文件名-c | –continue ：断点续传–progress=type bar（default） dot 进度条格式–limit-rate=amount ：以指定速率下载文件（–limit-rate=20k）","categories":[],"tags":[]},{"title":"16.进程和作业管理","slug":"16-进程和作业管理","date":"2020-06-15T05:09:30.000Z","updated":"2020-06-15T13:09:47.164Z","comments":true,"path":"2020/06/15/16-进程和作业管理/","link":"","permalink":"http://yoursite.com/2020/06/15/16-%E8%BF%9B%E7%A8%8B%E5%92%8C%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86/","excerpt":"","text":"Linux系统作业控制：Job：前台作业（foregroud）：通过终端启动，且启动后会一直占据终端； 后台作业（background）：可以通过终端启动，但启动后即转入后台运行（释放终端）； 命令行中启动的命令，如果不支持运行在后台的话，会一直占据前台；如何让作业运行于后台* 运行中的作业 * Ctrl+Z * 注意：送往后台后，作业转为静止态； * 尚未启动的作业 * COMMAAD &amp; 注意：此类作业虽然被送往后台，单其依然与终端相关；如果希望把送网后台的作业剥离与终端的关系： nohup command &amp;可实现作业控制的常用命令fg 把指定作业调回前台；注意，直接加上jobs显示的id即可，后面的+号表示默认fg转入的作业，即优先级；bg 让送往后台的作业在后台继续运行；kill 终止指定的作业；注意一定要加“%”号； 调整进程优先级可通过nice值调整的优先级范围：100–139 分别对应于：-20 19进程启动时，其nice值默认为0，其优先级是120； nice命令:以指定的nice值启动并运行命令nice [option] [command [ARGU]…]nice -n NICE注意：仅管理员可以调低nice值； renice命令：renice [-n] NICE PID...查看NICE值和优先级： ps axo pid,ni,priority,comm 未涉及的命令：sar、tsar、iostat、lftop、nethog… htop、dstat、top、ps命令的使用重点掌握；","categories":[],"tags":[]},{"title":"15.Linux进程管理命令","slug":"15-Linux进程管理命令","date":"2020-06-15T05:09:04.000Z","updated":"2020-06-15T13:09:20.742Z","comments":true,"path":"2020/06/15/15-Linux进程管理命令/","link":"","permalink":"http://yoursite.com/2020/06/15/15-Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/","excerpt":"","text":"系统调用read（），open（），write（）； 程序开发成内部多个执行流，每个执行流可单独运行与一个cpu核心上多线程运行编程模型；并行计算；必须拥有多核心才可以； 每个进程分配固定的线程，每个线程实现一个连接；linux线程即进程； 随时鉴定服务器的各种状态；cpu、内存、进程垃圾回收策略，运维基本能力； 管理进程的运行数量，占用资源，优先级如何； 进程管理命令客户访问慢。全方位去诊断，查看，网络，磁盘，程序bug；（了解程序运行法则）不背锅； Linux系统上的进程查看及管理工具：pstree、ps、pidof、pgrep、top、htop、glances、pmap、vmstat、dstat、kill、pkill、job、bg、fg、nohup、nice、renice、killall… CentOS5：SYSV init；CentOS6：UPstart（并行启动）dbus通信CentOS7：Systemd：（红帽的程序员参考MacOS开发）（开关机都非常快） pstree：查看进程树；1234init-+-getty |-getty |-getty `-getty Systemd: 123456789101112131415161718systemd─┬─VGAuthService ├─atd ├─auditd───&#123;auditd&#125; ├─crond ├─dbus-daemon───&#123;dbus-daemon&#125; ├─login───bash ├─lvmetad ├─master─┬─pickup │ └─qmgr ├─mysqld_safe───mysqld───18*[&#123;mysqld&#125;] ├─polkitd───6*[&#123;polkitd&#125;] ├─rsyslogd───2*[&#123;rsyslogd&#125;] ├─sshd───sshd───bash───pstree ├─systemd-journal ├─systemd-logind ├─systemd-udevd ├─tuned───4*[&#123;tuned&#125;] └─vmtoolsd───&#123;vmtoolsd&#125; PS：/proc 内核中的状态信息： 内核参数： 可设置其值从而调整内核运行特性的参数:/proc/sys 状态变量：其用于输出内核中统计信息和状态信息，仅用于查看； 参数，模拟成文件系统类型； proc中数字目录为进程号： 进程： /proc/# #:PIDps： report a snapshot of the current processes.取当前命令执行这一刻的状态；三种风格： 1 UNIX options, which may be grouped and must be preceded by a dash.2 BSD options, which may be grouped and must not be used with a dash.3 GNU long options, which are preceded by two dashes. 1:带一个“-“2:带两个“-”3：长选项“–” 启动进程的方式： 系统启动过程中自动启动；与终端无关的进程； 用户通过终端启动：与终端相关的进程； a：所有与终端相关的进程 x：所有与终端无关的进程 []内核线程 u：以用户为中心组织进程状态信息显示； VSZ ：虚拟内存级，占用的虚拟内存大小（非swap）； RSS ：常驻内存级；（不能放交换分区的数据）； STAT ：当前进程的运行状态：BSD风格；R:running S:interruptable sleeping D :uninter... T :stopped Z:zombie 带+ 号表示前台进程， l ：多线程进程 N ：高优先级 &lt; ：高优先级 s ：session leader -e ：Unix风格：显示所有进程； -f ：full format 完整格式的 常用组合2： ps -ef -F ：显示完整格式的进程信息 C：cpu utilization CPU占用 PSR：运行于哪颗cpu上； -H ：以层级结构显示进程的相关信息； 常用组合之三：-eFH 常用组合之四： -eo : 自定义要显示的字段；以逗号分割了； axo ：field1，field2.。。常见的field，pid、nl、prl、psr、pcpu、stat、comm、tty、ppid； nl：nice值 priority：优先级； rtprio：实时优先级；pgrep、pkill命令：进程过滤 关闭进程pgrep-u ：uid user；-U ：UID read user；-t terminal ：与指定的终端相关的进程；-l ：显示进程名；-a ：显示完整格式的进程名；-p pid ：显示此进程的子进程； pidof命令根据进程名，取其pid top命令：uptime命令：显示系统时间、运行时长以及平均负载top第一行显示的就是此信息； PID 用户 优先级 nice值 虚拟内存级 常驻内存级 共享内存级 运行状态 CPU百分比 内存百分比 运行时长 排序P :以占据cpu百分比排序M ：以占据内存百分比T ：累计占用cpu时间排序 首部信息： uptime信息：l命令 task及cpu信息：t命令 内存信息：m命令 退出：q修改刷新：s终止指定的进程：k 选项：-d #：刷新时间间隔，默认3s-b ：批次方式显示；-n #：显示多少批次； HTOP-d # ：指定延迟时间间隔； -u USer Name ：仅显示指定用户的进程 -s colume：以指定字段进行排序子命令： l：显示进程所打开的所有文件； s：跟踪选定的进程的系统调用 t：以层级关系显示各进程状态 a：将选定的进程绑定至某个cpu核心上； vmstat：报告虚拟内存的使用情况：procs： r:等待运行的进程的个数；cpu上等待运行的任务的队列长度； b：处于不可中断睡眠态的进程个数；被阻塞的任务队列的长度；memory： swpd ：交换内存使用总量； free ：空闲的物理内存总量 buff ：用于buffee的内存总量 cache :用于cache的内存总量swap： si : 数据进入swap的速率：单位是（kb/s） so ：数据离开swap的速率，（kb/s）io： bi ：从块设备读入数据到系统的速率（kb/s） bo ：保存数据到块设备的速率（kb/s）system： in ：中断速率 cs ：上下文切换的速率 cpu ： us ：用户空间的程序所占用cpu的百分比 sy ：system id ：idle wa ：wait st ：被虚拟化技术偷走的 选项： -s ：显示内存统计信息； pmappmap [options] pid […] pmap -x 1 -x :显示详细格式的信息； 另一种查看的方式 cat /proc/PID/maps glances 命令：常见选项： -b ：以Byte为单位显示网卡数据速率； -d ：关闭磁盘I/O模块 -m ：关闭mount模块 -n ：关闭network模块 -t # ：刷新时间间隔 -1 ：每个cpu的相关数据单独显示； -o ：指定输出格式； Dstat:强大的实时系统信息显示： -c –cpu CPU相关 -C total -d –disk 磁盘相关 -D sda sdb total -g 显示page相关的统计数据 -m 内存相关 -n 网络 -p 进程相关统计 -r IO -s swap –tcp 显示tcp –udp –raw –socket --ipc 进程间通信 --top-cpu 最占用cpu的进程 --top-io --top-memory --top-lantency 延迟最大的进程kill 命令： terminate a process用于向进程发送信号，以实现对进程的管理； kill -l 显示系统当前的信号列表每个信号的标识方法有三种： * 信号的数字标识 1 * 信号的完整名称 SIGHUP * 信号的简写名称 HUP 向进程发信号： kill [-s |signal|-SIGNAL] PID… 常用信号： * 1号进程：SIGHUP ：无需关闭进程让其重读配置文件； * 2号进程：SIGINT ：中止正在运行的进程，相当于ctrl+C * 9号进程：SIGKILL ：杀死运行中的进程；不管是否打开文件。直接杀掉；可能会损坏该进程打开的文件 * 15号进程：SIGTERM：终止运行中的进程； * 18 ：SIGCONT * 19 ：SIGSTOP killall 命令：kill process by NAMEkillall httpd","categories":[],"tags":[]},{"title":"14.linux进程原理、类型和内核状态","slug":"14-linux进程原理、类型和内核状态","date":"2020-06-15T05:08:34.000Z","updated":"2020-06-15T13:08:48.763Z","comments":true,"path":"2020/06/15/14-linux进程原理、类型和内核状态/","link":"","permalink":"http://yoursite.com/2020/06/15/14-linux%E8%BF%9B%E7%A8%8B%E5%8E%9F%E7%90%86%E3%80%81%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%86%85%E6%A0%B8%E7%8A%B6%E6%80%81/","excerpt":"","text":"软中断、发起内核调用；用户态，内核态， 系统调用： 用户模式（空间）、内核模式（空间）； 用户模式无法完成的操作，需要系统调用；实现模式切换； 内核的功用：进程管理、文件系统、网络功能、内存管理、驱动程序、安全功能； 时间片：按时间片划分资源， 进程优先级概念： 内核负责进程调度，根据优先级调度资源； 进程的当前状态保存下来； 内核在进程切换时需要保存上一个进程运行的现场。保存现场；–&gt; 恢复现场、切换太多会浪费时间； 进程–&gt; 运行中的程序的一个副本： 存在生命周期： 每一个进程结构都相同 内核存储进程的格式：task struct 多个人的task struct组成的链表：链表：有先后次序、（循环链表、双向链表、双向循环链表） 任何进程、在内核无漏洞的情况下、无权运行特权指令； 如果要运行，会出发中断，会立即唤醒内核，内核处理中断； 进程创建： 启动启动时–&gt;运行内核–&gt;创建第一个进程（init）（初始化进程）表示内核空间和用户空间都已经创建，init是负责用户空间管理–&gt;创建子进程 除了init（内核创建）之外，其余进程都是由父进程创建，fork（），clone（）父进程的内存空间也是子进程的内存空间，子进程创建数据需要写实复制。进程 必须是父进程给他销毁（白发送黑发）；子进程是为父进程完成特定任务，子进程任务时，父进程在等待状态，子进程任务结束后，父进程销毁，并继续往下走； 优先级： 0-139 1-99：实时优先级：数字越大—&gt;优先级越高 100-139：静态优先级；用户可控的；，数字越小&lt;—-优先级越高； NICE值：-20 —- 19 ​ | | ​ 100 139 可以调整一个进程的nice值来控制优先级； Big O O(1)、O(logn)、O(n),O(2^n)、O(n^2) | |——————————————O(1) | |—————————————— 优先队列： 运行队列，过期队列； 进程结构：task struct 状态 flags 父进程 。。。 内核对内存的分配； 分割成内存片，一般为4k，页框，用存储页面数据； 每一个进程都以为自己是唯一的进程； 线性地址空间； 内核只给进程它所需要的； 虚拟内存空间； 堆栈 堆向栈增长，栈向堆生长； LRU算法，最近最少使用，分配到交换分区； MMU:Memory Management Unit:内存管理单元； 转换虚拟内存空间和物理内存的映射关系； 缺页； 常驻内存级；必须在内存 虚拟内存级：可被交换的内存空间； IPC：Inter Press Communication 进程间通信； 同一主机上： ​ singal ​ shm：shared memory ​ semerphor： 跨主机： RPC：remote procecure call：远程过程调用； socket文件：记录自己和对方的端口； ​ A B |———| |———| |socket|————— |socket| |———| |———| ​ | | ​ | | 内核 内核 Linux内核：抢占式多任务； 进程类型： ​ 守护进程：daemon，在系统引导过程中启动的进程，跟终端无关的进程 ​ 前台进程：根终端有关，通过终端启动的进程； ​ 注意，也可把在前台启动的进程送往后台，以守护模式运行； 进程状态： ​ 运行态：running ​ 就绪态：ready ​ 睡眠态： ​ 可中断:interruptable； ​ 不可中端：uninterruptable； ​ 停止态：暂停于内存中，但不会被调度，除非手动启动：stopped ​ 僵尸态：zombie ，（子进程运行中，父进程突然就挂了） 进程的分类： CPU-BOUND：cpu密集型进程（多分cpu） IO-BOUND：IO密集型进程（提高优先级） IO：进程运行过程中加载数据，IO分2段，1.数据从磁盘装入内核。2内核复制一份到内存中， 《《linux内核设计与实现》》。《《深入理解linux内核》》","categories":[],"tags":[]},{"title":"13.网络基础","slug":"13-网络基础","date":"2020-06-15T05:07:53.000Z","updated":"2020-06-15T13:08:21.064Z","comments":true,"path":"2020/06/15/13-网络基础/","link":"","permalink":"http://yoursite.com/2020/06/15/13-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/","excerpt":"","text":"计算机网络基础、 CCNA IPV4:32位 IPV6:128位 通信时,进程的数字标识 16bit 0-65535:1-65535 1-1023：固定分配，只有管理员有权限启用； 1024-4W：半固定 4W+: 临时 进程地址： IP：port，socket MAC：本地通信，范围，本地局域网 IP：界定通信主机，源和目标主机；范围：互联网； port：界定进程，范围：主机 ​ OSI TCP（事实标准） 资源子网：应用层 应用层 ​ 表示层 ​ 会话层 通信子网：传输层 传输层 ​ 网络层 网络层 ​ 数据链路层 物理层 ​ 物理层 OS： 用户空间：应用提供资源 内核空间：进程调度，内存分配，网络功能（TCP协议栈） 端口由内核分配 路由表： 静态学习 动态学习：rlp2，ospf 路由条目： 目标地址 下一跳（nexthop） 主机路由 网络路由 默认路由 优先选择匹配范围最小的 将一台Linux主机接入到网络中实现网络通信： IP/MASK：本地通信； 路由：跨网络通信； DNS服务器地址：基于主机名的通信； 主dns服务器 次dns服务器 第三备用dns服务器 配置方式 动态分配DHCP 静态分配 ifcfg家族 ifconfig：配置ip，netmask route：路由 netstat：状态及统计数据查看 iproute2家族：–&gt;in OBJECT： addr：地址和掩码 link：接口 route：路由 ss：状态及统计数据查看 Centos7：NM（NetworkManager）家族 nmcli：命令行工具 nmtui：text window工具 注意： DNS服务器的指定–&gt;配置文件：/etc/resolv.conf 主机名： hostname 配置文件：/etc/sysconfig/network Centos7：hostnamectl 配置文件： Redhat及相关发行版 /etc/sysconfig/network-scripts/ifcfg-NETCARD_NAME 网卡接口命名方式： 传统命名： 以太网：ethx,[0,oo],例如eth0,rth1… PPP网络：pppx[0,…]，例如：ppp0,ppp1，… 可预测命名方案（Centos）： 支持多种不同的命名机制： Firmwar，拓扑结构 如果Firmware或BIOS为主板上集成的设备提供的索引信息可用，则根据此索引进行命名，如eno1，eno2，… 如果Firmware或BIOS为PCI-E扩展槽所提供的索引信息可用，且可预测，则根据此索引进行命名，如ens1，ens2，… 如果硬件接口的物理位置信息可用，则根据此信息命名，如enp2s0，… 如果用户显示定义，也可根据MAC地址命名，例如enx122161ab2e10，… 上述均不可用时，则仍使用传统方式命名； 命名格式的组成： ​ en：ethernet ​ wl：wlan ​ ww：wwan ​ 名称类型： ​ o&lt;index&gt;：集成设备的设备索引号； ​ s&lt;slot&gt;：扩展槽的索引号； ​ x&lt;MAC&gt;：基于MAC地址的命名； ​ p&lt;bus&gt;s&lt;slot&gt;：基于总线及槽的拓扑结构命名； PDU –&gt; 数据报文 –&gt; 数据帧 协议传输单元 链路层：以太网帧 互联网层：IP报文 以太网帧：MTU（1500） linux配置命令： ifcfg命令家族：ifconfig,route,netstat ifconfig: UP：激活 MTU：最大传输单元 (Maximum transmission unit) MULTICAST:多播（组播） BROADCAST：广播 prefixlen：前缀 txqueuelen： RX：接收 ：主要关注dropped,overruns这两项； TX：发送 ether：centos7表示以太网，相当于centos6 HWaddr：MAC地址； txqueuelen：传输队列长度 EXP: ifconfig eth1 192.168.10.100/24 up ifconfig eth1 192.168.10.100 netmask 255.255.255.0 送往内核中的tcp/ip协议栈，立即生效； 启用混杂模式： ifconfig eth1 promisc ifconfig eth1 -promisc 管理IPV6： add addr/prefixlen del addr/prefixlen ROUTE命令： 路由类型： 主机路由 目标为单个IP 网络路由 目标为网络主机 默认路由：目标为任意主机 route -n：查看显示路由条目，-n指以数字格式显示，不反解路由条目； Kernel IP routing table Destination Gateway Genmask Flags Metric Ref Use Iface route add -net 10.0.0.0/8 gw 192.168.10.1 dev eth1 route add -net 0.0.0.0/0.0.0.0 gw 192.168.10.1 dev eth1 route add default gw 192.168.10.1 route del -net 10.0.0.0/8 gw 192.168.10.0 route del default Netstat 命令 显示路由表：netstat -rn ​ -r：显示内核路由表 ​ -n：数字格式 显示网络连接： ​ netstat [–tcp|-t] [–udp|-u] ​ -t：tcp相关的连接 ​ -u：UDP ​ -w：raw ​ -l：处于监听的连接 ​ -a：所有状态 ​ -n：数字格式显示ip和port ​ -e：扩展格式 ​ -p：显示进程及PID 常用组合：ntlp。pantu。nta，utp ​ 传输层协议： ​ tcp：面向连接的协议。要建立连接，通信完成拆除连接； ​ udp：无连接的协议；直接发送报文； 所有接口 ​ netstat -i 指定接口 ​ netsrtat -I &lt;IFACE&gt; ifup/ifdown 命令 通过配置文件来识别接口并完成配置 /etc/sysconfig/network-scripts/ifcfg-IFACE hostname命令 查看：hostname 配置：hostname HOSTNAME 重启失效 Centos7：hostnamectl 1234567891011121314151617181920root@testlab:~# hostnamectl --helphostnamectl [OPTIONS...] COMMAND ...Query or change system hostname. -h --help Show this help --version Show package version --no-ask-password Do not prompt for password -H --host=[USER@]HOST Operate on remote host -M --machine=CONTAINER Operate on local container --transient Only set transient hostname --static Only set static hostname --pretty Only set pretty hostnameCommands: status Show current hostname settings #显示当前主机名信息； set-hostname NAME Set system hostname #设定主机名，永久有效； set-icon-name NAME Set icon name for host set-chassis NAME Set chassis type for host set-deployment NAME Set deployment environment for host 配置文件：/etc/sysconfig/network HOSTNAME=&lt;HOSTNAME&gt; 此方法不会立即生效，但是会一直有效 配置DNS服务器指向: 配置件：/etxc/resolv.conf 1234[root@Centos7 ~]# cat /etc/resolv.conf# Generated by NetworkManagersearch localdomainnameserver 192.168.1.2 #注意写IP，不能写域名 测试DNS（dig、host、nslookup） dig -t A FQDN ​ FQDN–IP 互联网大多数主机名不支持反解，就是从IP解析到域名 dig -x IP IP–FQDN iproute2家族: IP命令:查看，管理，路由，设备，策略路由，隧道 ip [ OPTIONS ] OBJECT { COMMAND | help } OBJECT ：命令可简写，只要能唯一识别 link | address | route ip link：网络设备的配置（add、show、set、delete） ip link set :改便设备运行状态 ip link set dev IFACE up/down multicast on/off 开启/关闭多播功能； promisc on/off：启用/关闭混杂模式 name:改网卡名（改之前先停用网卡） txqueuelen：队列长度 mtu：设置MTU大小，默认1500 netns：net namespace，用于将接口移动到指定的网络名称空间去（类似虚拟机） ip netns add ip netns list ip netns del ip netns exec NAME COMMAAND ip link show ip link help ip address add ​ ip address add IFADDR dev IFNAME ​ label NAME ：为额外添加的IP地址指明接口别名； ​ [broadcast ADDRESS]：广播地址；会根据IP和NETMASK自动计算得到； ​ [scope SCOPE_VALUE]：global（全局可用）、site（IPV6）、link（接口可用）、host（仅本机可用、内部使用） ip address del ​ ip address delIFADDR dev IFNAME ip address show ​ [iFACE] ：仅显示指定接口； ip address flush dev ip route add|delete|show |flush|get ​ ip route add TYPE PREFIX via GW [dev IFACE] [src SOURCE_IP] exp: ip route add 192.168.0.0/24 via 10.0.0.1 dev eth1 ip route add 192.168.1.0/24 via 192.168.1.128 dev eth1 src 192.168.1.128 （src为本机网卡地址中的其中一个） ​ ip route add default via GW； ip route add default via 192.168.1.2 ip route del #ip route delete 192.168.1.0/24 ip route get TYPE PREFIX #ip route get 192.168.0.0/24 SS 命令： -t ：tcp -u：udp -w：raw -l：listen -a：所有状态 -n：数字格式 -p：PID和进程 -e：扩展 -m：内存用量 -o：计时器信息 FILTER := [ state STATE-FILTER ] [ EXPRESSION ]：过滤选项 TCP的常见状态： TCP FSM： ​ LISTEN：监听 ​ ESTABLISEHD：建立的连接 ​ FIN_WAIT_1： ​ FIN_WAIT_2: ​ SYN_SENT: ​ SYN_RECV: ​ CLOSED: EXPRESSION: ​ dport= ​ sport= ​ 示例：ss -tan state 状态 配置文件：/etx/sysconfig/network-scripts/ifcfg-IFACE IP/NETMASK/GW/DNS等专属的配置文件： IFACE：接口名称 路由的相关配置文件： /etc/sysconfig/network-scripts/route-IFACE 配置文件/etc/sysconfig/network-scripts/ifcfg-IFACE通过大量参数来定义接口的属性；其可通过vim等文本编辑器直接修改，也可以使用专用的命令的进行修改 centos6：system-config-network centos7：nmtui，nmcli ifcfg-IFACE配置文件参数： DEVICE：设备名称，与IFACE必须保持一致； ONBOOT：在系统引导过程中是否激活设备； NETBOOT：是否支持网络引导； UUID：此设备的唯一标识； IPV6INIT：是否初始化IPV6； BOOTPROTO=激活此接口时使用什么协议配置接口属性，常用的有dhcp，bootp，static=none； TYPE：指定接口类型； DNS1~~DNS2：DNS服务器指向； DOMAIN：DNS搜索域； DEFROUTE：是否默认路由所使用接口； GATEWAY：默认网关； IPADDR：IP地址； NETMASK：子网掩码；Centos7支持使用prefix以长度方式指明子网掩码； IPV4_FAILURE_FATAL ： USERCTL：是否允许普通用户控制此设备； PEERDNS：如果bootproto的值为’dhcp‘，是否允许dhcpserver分配的dns服务器指向覆盖本地手动指定的dns服务器；默认为允许； NM_CONTROLLED：是否使用NetworkManager服务来控制接口配置； 网络服务： ​ network ​ NetworkManager 管理网络服务 ​ centos6：service SERVICE {start|status|restart|stop} ​ centos7：systemctl {status|start|stop|restart} SERVICE 配置修改以后，如果要生效，需要重启网络服务 centos6：service network restart centos7：systemctl restart network.service 用到非默认网关路由：/etc/sysconfig/network-scripts/route-IFACE 支持两种配置方式，但是不可混用； 每行一个路由条目 ​ TARGET via GW 每三行一个路由条目： ADDRESS#=TARGET NETMASK#=MASK GATEWAY#=NEXTHOP ifconfig 也可以添加多个IP地址 1.ifconfig IFACE——LABEL IPADDR/NETMASK ​ IFACE_LABEL：eth0，eth1 为别名添加配置文件： DEVICE=IFACE_LABEL BOOTPROTO：网上别名不支持动态获取 static，none； NMCLI：","categories":[],"tags":[]},{"title":"Trinity安装备忘","slug":"Trinity安装备忘","date":"2020-06-02T07:29:35.000Z","updated":"2020-06-02T15:29:51.607Z","comments":true,"path":"2020/06/02/Trinity安装备忘/","link":"","permalink":"http://yoursite.com/2020/06/02/Trinity%E5%AE%89%E8%A3%85%E5%A4%87%E5%BF%98/","excerpt":"","text":"Trinity core 3.3.51. Linux Requirementsdebian 10.41234apt updateapt install git clang cmake make gcc g++ libmariadbclient-dev libssl-dev libbz2-dev libreadline-dev libncurses-dev libboost-all-dev mariadb-server p7zip default-libmysqlclient-devupdate-alternatives --install /usr/bin/cc cc /usr/bin/clang 100update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang 100 ubuntu 19.101234apt updateapt install git clang cmake make gcc g++ libmariadbclient-dev libssl-dev libbz2-dev libreadline-dev libncurses-dev libboost-all-dev mariadb-server p7zip libmariadb-client-lgpl-dev-compatupdate-alternatives --install /usr/bin/cc cc /usr/bin/clang 100update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang 100 Fedora based distributions12345dnf install https://dev.mysql.com/get/mysql57-community-release-fc27-1.noarch.rpmdnf install git clang cmake make gcc gcc-c++ community-mysql-devel compat-openssl10-devel bzip2-devel readline-devel ncurses-devel boost-devel community-mysql-server p7ziprm -f /usr/bin/c++update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang 100 2. Core Installation1234567adduser &lt;username&gt;su - &lt;username&gt;git clone -b 3.3.5 git://github.com/TrinityCore/TrinityCore.gitcd TrinityCoremkdir buildcd buildcmake ../ [additional parameters] The above parameters when combined into a full example :123456By default this is the only row you will need to run to setup your install:cmake ../ -DCMAKE_INSTALL_PREFIX=/home/&lt;username&gt;/server Another Examples Below:cmake ../ -DCMAKE_INSTALL_PREFIX=/home/wow/server -DTOOLS=0cmake ../ -DCMAKE_INSTALL_PREFIX=/home/$USER/server -DTOOLS=0 -DWITH_WARNINGS=1 3. Building the core12make -j&lt;number of cores&gt;make install update123cd ~/TrinityCore/# For 3.3.5 Branchgit pull origin 3.3.5 4. Server Setup Directory Branch dbc all Mandatory maps all Mandatory vmaps all HIGHLY Recommended mmaps all HIGHLY Recommended cameras all Recommended gt master only Mandatory 12345678cd &lt;your WoW client directory&gt;/home/&lt;username&gt;/server/bin/mapextractormkdir /home/&lt;username&gt;/server/data # Next line is 3.3.x onlycp -r dbc maps /home/&lt;username&gt;/server/data# edit worldserver.conf and change datadir from \".\" to \"../data\" 12345cd &lt;your WoW client directory&gt;/home/&lt;username&gt;/server/bin/vmap4extractormkdir vmaps/home/&lt;username&gt;/server/bin/vmap4assembler Buildings vmapscp -r vmaps /home/&lt;username&gt;/server/data 1234cd &lt;your WoW client directory&gt;mkdir mmaps/home/&lt;username&gt;/server/bin/mmaps_generatorcp -r mmaps /home/&lt;username&gt;/server/data 123cp worldserver.conf.dist worldserver.confcp authserver.conf.dist authserver.conf # 3.3.5 onlycp bnetserver.conf.dist bnetserver.conf # 6.x, 7.x only 5. Databases Installation123456789101112131415CREATE USER &#39;trinity&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;trinity&#39; WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0;GRANT USAGE ON * . * TO &#39;trinity&#39;@&#39;localhost&#39;;CREATE DATABASE &#96;world&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;CREATE DATABASE &#96;characters&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;CREATE DATABASE &#96;auth&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;GRANT ALL PRIVILEGES ON &#96;world&#96; . * TO &#39;trinity&#39;@&#39;localhost&#39; WITH GRANT OPTION;GRANT ALL PRIVILEGES ON &#96;characters&#96; . * TO &#39;trinity&#39;@&#39;localhost&#39; WITH GRANT OPTION;GRANT ALL PRIVILEGES ON &#96;auth&#96; . * TO &#39;trinity&#39;@&#39;localhost&#39; WITH GRANT OPTION; 6. Networking123mysql -u root -puse authupdate realmlist set address='IP'; 7. Final Server Stepsaccount create USER PASSWORD account set gmlevel USER 3 -1 8. Client Setup Open the realmlist.wtffile inside your World of Warcraft\\Data folder. The IP in the realmlist.wtf file should be exactly the same as the IP address you entered in the realmlist table above. Change the first line to: *set realmlist * Example: set realmlist 127.0.0.1 (Optional) If you wish to use the WoW Launcher.exe to run your client then you must change your set patchlist to the same ip/dns name as your realmlist. mysql命令导入1 mysql命令导入多个sql文件方法：1$ for SQL in *.sql; do mysql -uroot -p&quot;123456&quot; mydb &lt; $SQL; done 2 source命令导入source命令需要首先进入MySQL命令行： 1$ mysql -uroot -p&quot;123456&quot; 导入多个sql**文件需要先创建一个额外的文件，名字随意，这里我们取：all.sql**，内容： 123source user1.sqlsource user2.sqlsource user3.sql 注意，这里每行一条，必须以source命令开头。 然后用source命令执行该文件： 12mysql &gt; use mydb;mysql &gt; source &#x2F;home&#x2F;gary&#x2F;all.sql","categories":[],"tags":[]},{"title":"Master版本编译安装总结","slug":"Master版本编译安装总结","date":"2020-05-31T21:18:30.000Z","updated":"2020-06-01T05:18:58.822Z","comments":true,"path":"2020/05/31/Master版本编译安装总结/","link":"","permalink":"http://yoursite.com/2020/05/31/Master%E7%89%88%E6%9C%AC%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%80%BB%E7%BB%93/","excerpt":"","text":"TrinityCore项目简介：TrinityCore是主要基于C ++ 的MMORPG框架。 它是从MaNGOS（大型网络游戏对象服务器）派生而来的，它基于该项目的代码，该代码随着时间的流逝发生了很大的变化，以在优化游戏机制和功能的同时优化，改进和清理代码库。MANGOS技术组骨干成员进行研发，在技术和经验上都有很好的保证 。 TrinityCore维护的版本目前有2个，分别是：3.3.5a的WLK版本、master（同步官服）版本; 官网：https://www.trinitycore.org 源码：https://github.com/TrinityCore Requirements1234567Processor with SSE2 support Boost ≥ 1.58MySQL ≥ 5.7.0OpenSSL ≥ 1.0.xCMake ≥ 3.13.4Clang ≥ 5 (heavy recommended, especially on master branch) or GCC ≥ 7.1.0zlib ≥ 1.2.7 debian 10.x 1234apt-get updateapt-get install git clang cmake make gcc g++ libmariadbclient-dev libssl-dev libbz2-dev libreadline-dev libncurses-dev libboost-all-dev mariadb-server p7zip default-libmysqlclient-devupdate-alternatives --install /usr/bin/cc cc /usr/bin/clang 100update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang 100 ubuntu 19.10+ 1234apt-get updateapt-get install git clang cmake make gcc g++ libmariadbclient-dev libssl-dev libbz2-dev libreadline-dev libncurses-dev libboost-all-dev mariadb-server p7zip libmariadb-client-lgpl-dev-compatupdate-alternatives --install /usr/bin/cc cc /usr/bin/clang 100update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang 100 Fedora based distributions 12345dnf install https://dev.mysql.com/get/mysql57-community-release-fc27-1.noarch.rpmdnf install git clang cmake make gcc gcc-c++ community-mysql-devel compat-openssl10-devel bzip2-devel readline-devel ncurses-devel boost-devel community-mysql-server p7ziprm -f /usr/bin/c++update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang 100 Core Installationsudo adduser &lt;username&gt; sudo su - &lt;username&gt; Building the server itselfGetting the source code3.3.5 (wotlk client) 12cd ~/git clone -b 3.3.5 git://github.com/TrinityCore/TrinityCore.git master 12cd ~&#x2F;git clone -b master git:&#x2F;&#x2F;github.com&#x2F;TrinityCore&#x2F;TrinityCore.git Compiling the source codeCreating the build-directory 123cd TrinityCoremkdir buildcd build Configuring for compilingcmake ../ [additional parameters] TIPS: 123456By default this is the only row you will need to run to setup your install:cmake ../ -DCMAKE_INSTALL_PREFIX=/home/&lt;username&gt;/server Another Examples Below:cmake ../ -DCMAKE_INSTALL_PREFIX=/home/wow/server -DTOOLS=0cmake ../ -DCMAKE_INSTALL_PREFIX=/home/$USER/server -DTOOLS=0 -DWITH_WARNINGS=1 Building the core12makemake install Keeping the code up to date123456cd ~/TrinityCore/# For 3.3.5 Branchgit pull origin 3.3.5 # For master Branchgit pull origin master Installing MySQL Serverrename the worldserver.conf.dist and authserver.conf.dist files in worldserver.conf and authserver.conf Extractors Directory Branch dbc all Mandatory maps all Mandatory vmaps all HIGHLY Recommended mmaps all HIGHLY Recommended cameras all Recommended gt master only Mandatory Extracting DBC, Maps, VMaps &amp; MMapsDBC and Maps files1cd &#96;&#96;&#x2F;home&#x2F;&#x2F;server&#x2F;bin&#x2F;mapextractor&#96;&#96;mkdir &#x2F;home&#x2F;&#x2F;server&#x2F;data&#96;&#96; &#96; &#96;# Next line is 3.3.x only&#96;&#96;cp -r dbc maps &#x2F;home&#x2F;&#x2F;server&#x2F;data&#96;&#96;# Next line is 6.x, 7.x only&#96;&#96;cp -r dbc maps gt &#x2F;home&#x2F;&#x2F;server&#x2F;data&#96; &#96;edit worldserver.conf and change datadir from &#96;&#96;&quot;.&quot;&#96; &#96;to &#96;&#96;&quot;..&#x2F;data&quot; Visual Maps (aka vmaps) Note: If you stop vmap4extractor before finish you will need to delete the Buildings directory before start again.You can also extract vmaps which will take quite a while depending on your machine (up to hours on ancient hardware). 1cd &#96;&#96;&#x2F;home&#x2F;&#x2F;server&#x2F;bin&#x2F;vmap4extractor&#96;&#96;mkdir vmaps&#96;&#96;&#x2F;home&#x2F;&#x2F;server&#x2F;bin&#x2F;vmap4assembler Buildings vmaps&#96;&#96;cp -r vmaps &#x2F;home&#x2F;&#x2F;server&#x2F;data When this is complete you will receive the following message which can be safely ignored. 1Processing Map 724&#96;&#96;[################################################################]&#96;&#96;Extracting GameObject models...Extracting World\\Wmo\\Band\\Final_Stage.wmo&#96;&#96;No such file.&#96;&#96;Couldn&#39;t open RootWmo!!!&#96;&#96;Done!&#96;&#96; &#96; &#96;Extract V4.00 2012_02. Work complete. No errors. Movement Maps (aka mmaps - optional RECOMMENDED)Extracting mmaps will take quite a while depending on your machine (up to hours). 1cd &#96;&#96;mkdir mmaps&#96;&#96;&#x2F;home&#x2F;&#x2F;server&#x2F;bin&#x2F;mmaps_generator&#96;&#96;cp -r mmaps &#x2F;home&#x2F;&#x2F;server&#x2F;data Setting up the configuration filesFirst of all you need to find the two default config files (named worldserver.conf.dist and authserver.conf.dist (\\bnetserver.conf.dist in 6.x)** ) and copy these to their namesakes without the **.dist extension. You can find them within /trinitycore/etc/ (may vary). 1cp worldserver.conf.dist worldserver.conf&#96;&#96;cp authserver.conf.dist authserver.conf # 3.3.5 only&#96;&#96;cp bnetserver.conf.dist bnetserver.conf # 6.x, 7.x only Databases Installation3.3.5 123456789101112131415CREATE USER &#39;trinity&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;trinity&#39; WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0;GRANT USAGE ON * . * TO &#39;trinity&#39;@&#39;localhost&#39;;CREATE DATABASE &#96;world&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;CREATE DATABASE &#96;characters&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;CREATE DATABASE &#96;auth&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;GRANT ALL PRIVILEGES ON &#96;world&#96; . * TO &#39;trinity&#39;@&#39;localhost&#39; WITH GRANT OPTION;GRANT ALL PRIVILEGES ON &#96;characters&#96; . * TO &#39;trinity&#39;@&#39;localhost&#39; WITH GRANT OPTION;GRANT ALL PRIVILEGES ON &#96;auth&#96; . * TO &#39;trinity&#39;@&#39;localhost&#39; WITH GRANT OPTION; master 1234567891011121314151617GRANT USAGE ON * . * TO &#39;trinity&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;trinity&#39; WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 ;CREATE DATABASE &#96;world&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;CREATE DATABASE &#96;characters&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;CREATE DATABASE &#96;auth&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;CREATE DATABASE &#96;hotfixes&#96; DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;GRANT ALL PRIVILEGES ON &#96;world&#96; . * TO &#39;trinity&#39;@&#39;localhost&#39; WITH GRANT OPTION;GRANT ALL PRIVILEGES ON &#96;characters&#96; . * TO &#39;trinity&#39;@&#39;localhost&#39; WITH GRANT OPTION;GRANT ALL PRIVILEGES ON &#96;auth&#96; . * TO &#39;trinity&#39;@&#39;localhost&#39; WITH GRANT OPTION;GRANT ALL PRIVILEGES ON &#96;hotfixes&#96; . * TO &#39;trinity&#39;@&#39;localhost&#39; WITH GRANT OPTION; Populating the MySQL Trinity databases下载github页面上的TDB文件，解压到程序主目录，就是有bin目录的那一层目录； Worldserver and Authserver configurations更新数据库的Realmlist Table Open the auth database and find the realmlist table. You need to edit the address field LAN IP (192.168.x.x) - If you are installing TrinityCore on a different computer from where you run WoW, but all the computers involved are on the same network (router) use that computer’s Local Area Network IP. 127.0.0.1 - Also known as “localhost”. Leave this setting alone here and in your configs if you’ve installed TrinityCore on the same computer you run WoW on, and only you are connecting to it. External IP – If you want other people to connect to your server, use your external IP. Visit http://www.whatismyip.com/ to find your external IP address. Account Creation Examples:3.3.5To create your account: very important, don’t use @ on account names. Type: *account create * Example: account create test test To set your account level: Type: account set gmlevel 3 -1 Example: account set gmlevel test 3 -1 Login to your account: Log in with account test and password test through wow.exe. masterTo create your account: Type: *bnetaccount create * Example: bnetaccount create test@test test To set your account level: Type: account set gmlevel 3 -1 Example: account set gmlevel 1#1 3 -1 Note: The username used for setting your gmlevel is not the same as the username you create with bnetaccount. You must manually find the username in auth.account.username. These are formatted as 1#1, 2#1, etc. NOTE2: if you have connected before using this command you will need to relog. Login to your account: Log in with email test@test and password test.through a Custom Client Launcher (Not provided). Client Setup3.35only Open the realmlist.wtf file inside your World of Warcraft\\Data folder. The IP in the realmlist.wtf file should be exactly the same as the IP address you entered in the realmlist table above. Change the first line to: *set realmlist * Example: set realmlist 127.0.0.1\\ (Optional) If you wish to use the WoW Launcher.exe to run your client then you must change your set patchlist to the same ip/dns name as your realmlist. master only Change Config.wtf: SET portal “****” The IP in the Config.wtf file should be exactly the same as the IP address you entered in the realmlist table above. (Example: SET portal “127.0.0.1”) Note: you will need a custom client launcher (not provided) to connect to master branch server. NOTE don’t use localhost for address, if you need to connect to localhost use 127.0.0.1","categories":[],"tags":[]},{"title":"103.为nginx创建ssl自签证书","slug":"103-为nginx创建ssl自签证书","date":"2020-05-31T20:27:45.000Z","updated":"2020-06-01T04:27:45.966Z","comments":true,"path":"2020/05/31/103-为nginx创建ssl自签证书/","link":"","permalink":"http://yoursite.com/2020/05/31/103-%E4%B8%BAnginx%E5%88%9B%E5%BB%BAssl%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"12.sed","slug":"12-sed","date":"2020-05-31T20:27:31.000Z","updated":"2020-06-01T04:31:03.163Z","comments":true,"path":"2020/05/31/12-sed/","link":"","permalink":"http://yoursite.com/2020/05/31/12-sed/","excerpt":"","text":"文本处理三剑客： sed、awk、grep SED 不处理源文件，每次读入一行到自己的工作空间（模式空间），处理完成之后输出至标准输出 默认会处理所有行，我们可以指定让他处理匹配到的行 因此； 先读入一行，然后判断是否匹配我们给的PATTERN 匹配到处理 不匹配不做任何处理 pattern space ​ / \\ no yes | / | | / edit –&gt; stdout stdout | ​ hold space 逐行读入，匹配处理 sed [OPTION]… ‘script’ [input-file]… script :地址定界编辑命令（直接写在一起） -n 不输出，（读入之后一定会输出stdout，匹配到的会进行编辑）如果不希望输出，使用这个选项，不输出模式空间的内容； -e script ; –expression=script :多点编辑 sed -e ‘s@^#[[:space:]]*@@’ -e ‘/^UUID/d’ /etc/fstab -f script-file 每行一个编辑命令 -r –regexp-extended ：支持使用扩展正则表达式 -i[SUFFIX], –in-place[=SUFFIX] ： 直接编辑源文件 地址定界： 不给地址：空地址，对全文进行编辑 单地址： #：指定行 /pattern/：被此模式匹配到的每一行； 地址范围 #.# : #,+#: #,/pat1/ /pat1/,/pat2/ 步进：~ 1-2：所有奇数行 2-2：所有偶数行 ​ 编辑命令: d 删除 注意删除的就不会再显示了,因为匹配到的内容被删除了，显示的是未删除的内容 p 显示模式空间中的内容；（如不加-n选项指定行会被显示2遍） a \\text ：在行后面追加文本“text”，支持使用\\n添加多行 i \\text：在行前面添加文本，支持使用\\n插入多行 c \\text：把匹配到的行替换为此处指定的文本“text” w /path/to/somewhere：保存模式空间匹配到的行至指定的文件中； r /path/from/somefile：读取指定的文件的内容至当前文件被模式匹配到的行后面，文件合并； =：模式匹配到的行加行号 ！：条件取反：格式为地址定界!编辑命令； s///：查找替换，其分隔符可自行指定。常用s@@@，s###等； 替换标记： g：全局 w /path/to/somefile：将替换成功的结果保存至指定文件中； p：显示替换成功的行； 练习1：删除/boot/grub/grub2.cfg文件中所有以空白字符开头的行的行首的所有空白字符； sed ‘s@^[[:space:]]+@@’ /boot/grub2/grub.cfg 练习2：删除/etc/fstab文件中所有以#开头的行的行首的#号以及#号后面的所有空白字符； sed ‘s@^#[[:space:]]*@@’ /etc/fstab 练习3：输出一个绝对路径给sed，取出其目录，其行为类似dirname echo “/var/log/messages” | sed ‘s@[^/]+?$@@’ echo “/var/log/messages/“ | sed -r ‘s@[^/]+/?$@@’ 高级编辑命令： h：把模式空间中的内容覆盖至保持空间中； H：把模式空间中的内容追加至保持空间中； g：把保持空间中的内容覆盖至模式空间中； G：把保持空间中的内容追加至模式空间中； x：把模式空间中的内容与保持空间中的内容互换； n：覆盖读取匹配到的行的下一行至模式空间中； N：追加读取匹配到的行的下一行至模式空间中； d：删除模式空间中的行； D：删除多行模式空间中的使用行； 示例： ​ sed -n ‘n;p’ /etc/fstab：显示偶数行； ​ sed ‘1!G;h;$!d’ file：逆序显示； ​ sed ‘$!N;$!D’ /etc/fstab :最后两行; ​ sed ‘/^$/d;G’ file：删除所有空白行，而后为每行后面加一个空白行 ​ sed ‘n;d’ FILE：显示奇数行； ​ sed ‘G’ file：在原有的每行后面添加空白行，包括原来的空白行 注意：在任何修改系统关键配置文件的时候，记得要先做备份，而且要定期对/etc目录做备份","categories":[],"tags":[]},{"title":"11.yum实战进阶及shell脚本实现磁盘管理实战","slug":"11-yum实战进阶及shell脚本实现磁盘管理实战","date":"2020-05-31T20:27:24.000Z","updated":"2020-06-01T04:30:50.974Z","comments":true,"path":"2020/05/31/11-yum实战进阶及shell脚本实现磁盘管理实战/","link":"","permalink":"http://yoursite.com/2020/05/31/11-yum%E5%AE%9E%E6%88%98%E8%BF%9B%E9%98%B6%E5%8F%8Ashell%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98/","excerpt":"","text":"常用的桌面环境： windows7/8/10； Gnome KDE XFCE4 CINEMON YUM C/S架构模型 yum client（yum） yum repository（ftp/http/https） Bash 脚本编程 过程式编程语言的执行流程： 顺序执行 选择执行 循环执行 选择执行: &amp;&amp; || if case if语句：三种格式 单分支： if condition；then ​ if-true-分支； fi 双分支：、 if condition； then ​ if-true-分支 else ​ if-false分支 fi 多分支的if语句 if condition1；then ​ 条件1为真分支； elif condition2； then ​ 条件2为真分支 elif condition3；then ​ 条件3为真分支 … elif conditionN； then ​ 条件N为真分支 else ​ 所有条件均不满足时的分支 fi 注意：即使多个条件可能同时都会满足，分支只会选择执行其中一个，首先测试为“真”； case 相当于一个简化版本的多分支if语句，但并不是所有的多分支if语句都可以转化为case语句； 示例：脚本参数传递一个文件路径给脚本，判断此文件的类型； 练习：写一个脚本： 传递一个参数给脚本，此参数为用户名； 根据ID号判断用户类型： 0：管理员 1-999 系统用户 1000+ 登录用户 循环执行：将一段代码重复执行0、1或多次； 进入条件：条件满足时才进入循环； 退出条件：每个循环都应该有退出条件，以有机会退出循环； for循环 while循环 until循环 for循环 遍历列表 控制变量 for VARAIBLE in LIST；do ​ 循环体 done 进入条件：只要列表有元素，即可进入循环；把列表中的元素挨个赋值给变量，每个来一遍； 退出条件：列表中的元素遍历完成； LIST的生成： 直接给出； 整数列表； {start..end}；（两个英文句号） seq [start [incremtal]] last 返回列表的命令； glob 变量引用 示例1，判断/var/log下文件类型 12345678910111213 1 #!/bin/bash 2 for file in /var/log/*;do 3 if [ -f $file ]; then 4 type=\"Regular file.\" 5 elif [ -d $file ]; then 6 type=\"Directory.\" 7 elif [ -L $file ]; then 8 type=\"Symbolic link.\" 9 elif [ -b $file ]; then10 type=\"Special file.\"11 fi12 echo \"$file $type\"13 done 练习： 分别求100以内所有偶数之和，以及所有奇数之和； 123456789101112 1 #!/bin/bash 2 # 计算100以内的奇数和和偶数和 3 declare i jsum=1 osum=2 4 for i in &#123;3..100&#125;;do 5 if [ $[$i%2] -eq 0 ]; then 6 osum=$[$osum+$i] 7 else 8 jsum=$[$jsum+$i] 9 fi10 done11 echo \"奇数之和=$jsum.\"12 echo \"偶数之和=$osum.\" 计算当前系统上的所有用的id之和; 12345678910 1 #!/bin/bash 2 # 计算系统上所有id之和 3 declare i idsum=0 4 users=$(cat /etc/passwd | cut -d: -f1) 5 #echo $users 6 for user in $users;do 7 uid=$(id -u $user) 8 idsum=$[$idsum+$uid] 9 done10 echo \"id之和: $idsum\" 通过脚本参数传递一个目录给脚本，而后计算此目录下所有文本文件的行数之和，并说明此类文件的总数； 1234567891011121314151617181920 1 #!/bin/bash 2 # 通过脚本参数传递一个目录给脚本，而后计算此目录下所有文本文件的行数之和，并说明此文件的总数 3 4 [ $# -eq 0 ] &amp;&amp; echo \"Need a parament.\" &amp;&amp; exit 1 5 ! [ -d $1 ] &amp;&amp; echo \"Need a directory\" &amp;&amp; exit 2 6 7 declare -i linesum=0 8 declare -i filesum=0 9 files=$(ls $1) 10 cd $1 11 for file in $files;do 12 if [ -f $file ]; then 13 line=$(wc -l $file | cut -d' ' -f1) 14 linesum=$[$linesum+$line] 15 let filesum++ 16 fi 17 done 18 echo \"行数之和: $linesum\" 19 echo \"文件总数: $filesum\"~","categories":[],"tags":[]},{"title":"10.Linux软件包管理yum工具介绍","slug":"10-Linux软件包管理yum工具介绍","date":"2020-05-31T20:27:17.000Z","updated":"2020-06-01T04:30:37.605Z","comments":true,"path":"2020/05/31/10-Linux软件包管理yum工具介绍/","link":"","permalink":"http://yoursite.com/2020/05/31/10-Linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86yum%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"Linux程序包管理rpm在安装包时需要解决依赖关系，手动解决比较麻烦，所以依赖于前端工具自动解决依赖关系，所以YUM应运而生，最新的为DNF，fedora22引入，CentOS7（安装之后也可以使用）以上可用。 YUM接受命令后，通过配置文件访问源地址，URL（同一资源定位符）； 访问远程服务器主机，服务器提供程序包仓库，放了每一个程序包的名字，版本，依赖关系； (rpm包的户口簿)，分析已安装的包和未安装的包，然后下载需要下载的包，缓存到本地。安装完之后会删除安装包，但源数据会被缓存本地，以后访问会访问本地的源数据去分析，源数据需要偶尔更新。（每次去请求源数据） 源较多，选择最快的即可； 镜像列表（使用互联网的或者自建仓库）； 将远程的镜像到本地； YUM依赖于RPM而存在，只是一个前端工具； FTP、HTTP CREATEREPO 程序包分组 YUM（Yellowdog Updater, Modified）；是一个基于RPM包管理的字符前端软件包管理器。能够从指定的服务器自动下载RPM包并且安装，可以处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。被Yellow Dog Linux本身，以及Fedora、Red Hat Enterprise Linux采用。 YUM repository：yum repo /etc/yum.conf 存储了众多rpm包，以及包的相关的元数据文件（放于特定目录下，repodata）； 文件服务器： FTP:// HTTP:// nfs:// file:/// yum 客户端： 配置文件： /etc/yum.conf ：为所有仓库提供的公共配置 /etc/yum.repos.d/*.repo ：为仓库的指向提供配置 cachedir 用于存储下载的软件包的目录。 debuglevel 日志记录级别，从0（无）到10（全部）。 exactarch 如果设置为1，则仅更新软件包以使用正确的体系结构。 exclude 用空格分隔的要从安装或更新中排除的软件包列表，例如： exclude=VirtualBox-4.? kernel*。 gpgcheck 如果设置为1，则通过检查GPG签名来验证软件包的真实性。gpgcheck如果软件包是未签名的，则可能需要将其设置 为0，但应注意该软件包可能已被恶意更改。 gpgkey GPG公钥文件的路径名。 installonly_limit 任何一个软件包可以安装的最大版本数。 keepcache 如果设置为0，请在安装后删除软件包。 logfile yum日志文件的路径名。 obsoletes 如果设置为1，则在升级过程中更换过时的软件包。 plugins 如果设置为1，则启用扩展yum功能的插件。 proxy 代理服务器的URL，包括端口号。 proxy_password 使用代理服务器进行身份验证的密码。 proxy_username 使用代理服务器进行身份验证的用户名。 reposdir yum应该 在其中查找带有.repo 扩展名的存储库文件的目录。默认目录为 /etc/yum.repos.d。 仓库的定义： [repositoryID] name=Some name for this repository baseurl=url://path/to/repository/ enable={1|0} gpgcheck={1|0} gpgkey=URL enablegroups={1|0} failovermethod={} cost=（默认1000） YUM yum repolist ：显示仓库列表，默认仅显示启用的，显示未启用的(yum repolist disabled); yum list {all | updates|available|installed|glob_exp1} yum install ：安装程序包,后面直接跟上packagename，一次可安装多个,可选择版本安装，默认安装最新的版本； yum update ：升级指定程序包 check-update ：检查升级； info […] ：查看程序包的详细信息； remove | erase package1 [package2] […] ：卸载包; provides | whatprovides feature1 [feature2] […] ：查看包提供的特性（可以是某文件）是有哪个程序包提供; clean [ packages | metadata | expire-cache | rpmdb | plugins | all ] ：清理本地缓存 makecache ：创建缓存； search string1 [string2] […] ：根据指定的关键字搜索包名及summary信息; reinstall package1 [package2] […]：重新安装，覆盖的方式安装； downgrade package1 [package2] […]：降级安装; deplist package1 [package2] […] ：依赖关系分析；查看指定包所依赖的capabilities； version [ all | installed | available | group-* | nogroups* | grouplist | groupinfo ] ：查看版本信息； history [info|list|packages-list|packages-info|summary|addon-info|redo|undo|roll‐back|new|sync|stats] :查看YUM事务历史； localinstall rpmfile1 [rpmfile2] […] ：安装本地rpm文件；可使用仓库的依赖关系解决；（已经废弃，直接使用install，update即可）; groups […] ：包组相关命令；{info | install | list | remove | summary}；groupinfo,groupinstall,groupupdate,groupremove,grouplist; TIPS：YUM可使用新版本的源，不能使用老版本的，比如6.0可使用6.1的，但是不能使用5.9的； 使用本地YUM源 使用本地光盘作为本地yum仓库: 挂载光盘至某目录； 创建配置文件； [CentOS7] name= baseurl= gpgcheck= enabled= YUM的命令行命令优先级高于配置文件；命令行选项： –nogpgcheck：禁止进行gpgcheck； -y ：自动回答yes； -q ：静默模式； –disablerepo=repoidglob ：临时禁用此处指定的repo； –enablerepo=repoidglob ：临时启用此处指定的repo； –noplugins : 临时禁用所有插件 YUM的repo配置文件中可使用的变量； 把远程服务器上所有访问路径固定下来，用变量来获取当前版本号，平台架构； $releaserver ：当前OS的发行版的版本号； $ARCH ：平台； $basearch ：基础平台； $YUM0~YUM9 创建YUM仓库 必须先安装这个createrepo程序包； createrepo [option] &lt;directory&gt; 程序包编译安装： testapp-Version-release.src.rpm –&gt; 安装后，使用rpmbuild命令制作成二进制格式的rpm包，而后再安装； 源代码 –&gt; 预处理 –&gt; 编译（GCC） –&gt; 汇编 – &gt; 链接 –&gt; 执行 源代码组织格式： 多文件，文件中的代码之间，可能存在跨文件依赖关系； C、C++ ：make（Configure –&gt; Makefile.in –&gt; makefile）项目管理工具，依赖编译器去编译程序； JAVA ：maven 编译安装三步骤： ./configure: 通过选项传递参数，指定启用特性、安装路径等、执行时会参考用户的指定以及Makefile.in 文件生成makefile； 检查依赖的外部环境； make 根据makefile文件，构建应用程序； make install 开发工具： autoconf：结合配置文件生成configure脚本 automake：结合配置文件生成Makefile.in文件 建议：安装之前，阅读INSTALL文件，如果没有，阅读README文件； 开源程序源代码的获取： 官方网站；官方自建站点 代码托管网站： Github Gitlab GoogleCode SourceForge Gitee 码云 C、C++：GCC（GNU C Complier）（早期也被称作CC） 编译C源代码： 前提要提供开发工具和开发环境； 开发工具：make gcc 开发环境：开发库，头文件 glibc：标准库 通过 ”包组“ 提供开发组件： CentOS6：Development Tool CentOS7：Development and Creative Workstation Debian系列：build-essential 第一步：configure脚本 选项：指定安装位置，指定启用的特性； –help：获取其支持使用的选项 安装路径设定：–prefix=/path/to/somewhere ：指定安装位置； 配置文件安装位置：–sysconfdir=/PATH/to/somewhere; System Types: Optional features :可选特性； –disable-feature –enable-feature[=ARG] Optional Packages:可选包 –with-PACKAGE[=ARG] –without-PACKAGE make make install 安装后的配置 导出二进制程序目录至PATH变量中； 编辑/etc/profile.d/NAME.sh export PATH=/PATH/TO/BIN:PATH 导出库文件路径 编辑/etc/ld.so.conf.d/NAME.conf 添加新的库文件到此处； 让系统重新生成缓存 ldconfig [-v] 导出头文件 ln -sv 导出帮助手册 编辑/etc/man.config 添加一条manpath 练习： YUM的配置和使用：包括yum repository的创建； 编译安装apache 2.2；启动此服务； 程序包管理，rpm、yum、编译","categories":[],"tags":[]},{"title":"9.任务计划crontab及企业常用操作","slug":"9-任务计划crontab及企业常用操作","date":"2020-05-31T20:27:09.000Z","updated":"2020-06-01T04:30:14.299Z","comments":true,"path":"2020/05/31/9-任务计划crontab及企业常用操作/","link":"","permalink":"http://yoursite.com/2020/05/31/9-%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92crontab%E5%8F%8A%E4%BC%81%E4%B8%9A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","excerpt":"","text":"Linux 任务计划、周期性任务执行未来的某个时间点执行以此某任务：at，batch 周期性运行某任务：crontab 执行结果：会通过邮件发送给用户 这个邮件只用于本机，以及本机各用户之间 /var/spool/mail/USER 用户的邮箱 ss -ntlp master 进程属于postfix进程负责监听的，为本地主机个用户之间传递邮件用的 本地电子邮件服务： smtp： simple mall transmission protocol pop3：post office protocol imap4：Internet mall access protocol mail命令 mailx - send and receive Internet mall MUA：mall USer Agent 用户收发邮件的工具程序 mailx [-s SUBJECT] USERNAME@[HOSTNAME] mail不带任何命令表示收邮件 输入邮件编号即可查看邮件 subject：标题 hostname：在发给本机用户时可省略 content-type:正文内容 from：谁发的 to：发给谁 DAte：时间 user-agent：用什么程序发的； 示例： mail -s “fstab file” root &lt; /etc/fstab cat /etc/fstab | mail -s “fstab file” centos 邮件正文的输入： 1：交互式输入：单独成行可以表示正文结束，ctrl+d 提交亦可 2：输入重定向 3：通过管道 AT命令：at [OPTION]… TIME at now+2min at&gt;直接输入你要执行的命令 ctrl+d提交 at -l 显示任务队列 at的作业有队列，用单个字母表示，默认都使用a队列； 常用选项： -l 查看作业队列，相当于atq -f /path/from/somefile 从文件读入作业任务，而不用再交互式输入 -d 删除任务队列，相当与atrm -c 查看指定作业的具体内容； -q queue：指明队列； 注意，作业执行结果是以邮件发给提交作业的用户； batchbatch会让系统自行选择在系统资源空闲的时间去执行指定的任务；其他与at相同 crontab周期性执行任务 cron机制： 服务程序： cronle：主程序包，提供了crond守护进程及相关辅助工具； systemctl status crond service crond status 向crond提交作业的方式不同于at，它需要使用专用的配置文件，此文件有固定的格式，不建议使用文本编辑器直接编辑此文件；需要使用crontab命令； cron任务分为2类： 系统cron任务：主要用于实现系统自身的维护；手动编辑：/etc/crontab 文件 用户cron任务： 命令：crontab命令 SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root For details see man 4 crontabs Example of job definition: .—————- minute (0 - 59) | .————- hour (0 - 23) | | .———- day of month (1 - 31) | | | .——- month (1 - 12) OR jan,feb,mar,apr … | | | | .—- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat | | | | | user-name command to be executed 注意： 1.每一行定义一个周期性任务； 定义周期性时间 user-name 运行任务的用户身份 command to be excuted 任务，最好使用程序的绝对路径 2.此处的环境变量不同与用户登陆后获得的环境，因此，建议命令使用绝对路径，或者自定义PATH变量 3.执行结果会以邮件的形式mailto指定的用户 用户cron的配置格式：/var/spool/cron/USERNAME注意： 1.每行定义一个cron任务，共6个字段； 2.此处的环境变量不同与用户登陆后获得的环境，因此，建议命令使用绝对路径，或者自定义PATH变量 3.执行结果会以邮件的形式发给当前用户 时间表示法：1.特定表示法； 给定时间点有效取值范围的值； 注意：day of week 和day of month 一般不同时使用； 2.* 给定时间点上有效取值范围内的所有值；min（0-59），每分，每小时 3.离散取值法：在给定时间点上使用逗号分割的多个值； #，#，# 4.连续取值： - 在时间点上使用-连接开头和结束 #-# 5 在指定时间点上，定义步长； */# :# 及步长 注意： 1.指定时间点不能被步长整除时，其意义将不复存在； 2.最小单位为 分钟 ，想完成 秒级任务，需要额外借助于其他机制； 定义每分钟任务：而在利用脚本实现在每分钟之内，循环执行多次； 示例： 1.3 * * * * ：每小时执行一次；每小时的第3分钟； 2.3 4 * * 5 : 每周执行一次；每周5的4点3分； 3.5 6 7 * * ：每月执行一次，每月的7号的6点5分； 4.7 8 9 10 * ：每年执行一次；每年的10月9号8点7分 5.9 8 * * 3,7 ：每周三和周日；8点9分 6.* 8,20 * * 3,7 ; 每周三和周日的8点和20点各执行一次； 7.0 9-18 * * 1-5：周一到周五的9-18点，工作日的每小时； 8.*/5 * * * * ：每5分钟执行一次； 9.*/7 * * * * : crontab命令：crontab [-u user] [-l | -r | -e] [-i] [-s] -e 编辑任务； -l 列出所有任务 -r 移除所有任务；即删除/var/spool/cron/USERNAME文件； -i 在使用-r选项移除所有任务时提示用户确认； -u user：root用户可指定为某个用户编辑任务； 注意：运行结果以邮件通知给当前用户；如果拒绝接受邮件： 1.command &gt;/dev/null 2.command &amp;&gt; /dev/null (确保正常执行再加/dev/null，否则就悲剧了) 注意：定义command，如果命令需要用到%，需要对其转义；但放置于单引号中的%不用转义亦可； 某任务在指定的时间因关机未能执行，下次开机会不会自动执行？ 不会！！ 如果期望某时间因故未能按时执行，下次开机后无论是否到了时间点都要执行一次，可用anacron实现； 课外作业：anacron及其应用； 练习： 1.每12个小时备份一个/etc 目录至/backup 目录中，保存文件格式为“etc-yyyy-mm-dd-hh.tar.xz”; 2.每周2,4,7备份/var/log/secure 文件至/logs目录中，文件名格式为 “secure-yyyymmdd”; 3.每两小时取出当前系统/proc/meminfo文件中以S或M开头的行信息追加到/tmp/meminfo.txt文件中；","categories":[],"tags":[]},{"title":"8.Linux程序包管理","slug":"8-Linux程序包管理","date":"2020-05-31T20:27:01.000Z","updated":"2020-06-01T04:30:01.518Z","comments":true,"path":"2020/05/31/8-Linux程序包管理/","link":"","permalink":"http://yoursite.com/2020/05/31/8-Linux%E7%A8%8B%E5%BA%8F%E5%8C%85%E7%AE%A1%E7%90%86/","excerpt":"","text":"Linux程序包管理概述软件层 shell（人机交互接口） // \\\\ lib call(库调用) // \\\\ system call(系统调用)] // \\\\ 底层硬件 API：Application Program Interface API函数库是连接用户软件和系统内核桥梁，或者是“协议”，操作系统厂商写好函数库说明书，应用软件开发者不必关心其内部是如何实现的，用的时候对照着API手册查询就够了；应用软件也可以越过系统函数库通过system call（系统调用）直接调用os内核函数，如图中红色虚线所示，当然这种方式并不被推荐。 如果各系统平台都能提供相同的系统函数库，那么开发者在这个系统函数库基础之上编写软件代码，那么就很容易将软件移植到各个系统平台。然而，这只是个美好的愿望，IEEE就是为了达成这样的愿望才牵头制定POSIX标准。POSIX标准主要就是针对UNIX API而制订，不管函数如何包装、功能如何实现，但API按照标准约定来（比如函数变量等符号名称、数据结构、参数类型与个数、基本工具命令名称等），Linux完全兼容POSIX标准（部分函数符合POSIX，部分函数是Linux专有，即是POSIX的超集），微软声称Windows部分兼容POSIX标准。 ABI：Application Binary Interface Unix-Like：ELF Windows：exe，msi 从软件角度理解系统计算机世界里存在各种各样的操作系统，目前通用操作系统有主流的三大类： UNIX，通用操作系统鼻祖，发展出特别多衍生系统； Windows，微软家根基，桌面市场霸主； GNU/Linux，UNIX近亲，有各种发行版如Ubuntu、CentOS等。 “All problems in computer science can be solved by another level of indirection（计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决）”。 在硬件基础之上逐步堆叠了系统内核、系统函数库等中间层，在应用程序内部还可以继续细分多个层次，这样把最终用户与硬件隔离开来，增强了抽象能力、屏蔽底层细节，也让开发者分工，专注于各自层次的开发，同时降低了软件迁移的难度。 Cygwin就是在Windows中增加了一个中间层——兼容POSIX的模拟层，并在此基础上构建了大量Linux-like的软件工具。再来解释本文开头的回答，如下图，POSXI兼容环境包括以下两部分： cygwin1.dll，作为实现POSIX系统调用的模拟层，可原生运行在Windows中； 在cygwin1.dll之上构建的大量函数库、应用程序，如libc、zlib、bash、gcc、vim、awk、sed、git等等，与UNIX/Linux几乎等同*。 *注：Cygwin的libc是Newlib，Linux的libc是GNU libc，UNIX有的是BSD libc。 库级别的虚拟化Linux：WinE Windows：Cygwin MinGW：MinGW，又称mingw32，是将GCC编译器和GNU Binutils移植到Win32平台下的产物，包括一系列头文件、库和可执行文件。 另有可用于产生32位及64位Windows可执行文件的MinGW-w64项目，是从原本MinGW产生的分支。如今已经独立发展。 系统级开发：(注重性能) C/C++ :httpd,vsftpd,nginx 新的热门语言：Go 应用级开发: Java/Python/Perl/Ruby/Php java：hadoop，hbase （jvm） python：openstack （pvm） perl：（perl解释器） ruby：（ruby解释器） php：（php解释器） 高级语言，开发周期端，性能不如C，库多，代码量少 标准C库 程序格式：源代码：文本格式的程序代码； ​ 编译开发环境：编译器、头文件、开发库 二进制格式：文本格式的程序代码–&gt;二进制格式–&gt;（二进制程序、库文件、配置文件、帮助文件） java/python程序格式： 源代码：编译成能够在其虚拟机（jvm/pvm）运行的格式； ​ 开发环境：编译器，开发库、导入的库（跟头文件实现功能相同） 二进制 项目构建工具： C/C++：make Java：maven 程序包管理器源代码 –&gt; 目标二进制代码 –&gt; 组织成为一个或者有限几个包文件; 安装、升级、卸载、查询、校验 程序包管理器： ​ Debian：dpt，dpkg：“.deb”， ​ Redhat：redhat package manager，rpm：“rpm”；开始使用perl开发，后来C重写。 ​ rpm事实上的工业标准； ​ SuSE：rpm，与红帽的组织格式不兼容，使用的rpm包管理器，“.rpm” ​ Gentoo：ports ​ Archlinux：pacman； 源代码：name-VERSION.tar.gz Version：Major.minor.release 版本 –&gt;主版本号 –&gt; 次版本号 –&gt; rpm包命名格式： name-Version-release.arch.rpm Version：major.minor.release release.arch：rpm包的发行号 ​ release.os.:2.el7.i386.rpm ​ archetecture:I386,X64(amd64),ppc,noarch（java，python之类的不依赖凭平台的） redis-3.0.2-1.centos7.x64.rpm changelog:版本更新历史； i386（旧32位cpu），i686（较新32位cpu），x64/amd64（64位cpu） 拆包：主包和支包 主包：name-version-release.arch.rpm 支包：name-function-version-release.arch.rpm ​ function：devel（开发版本），utils（工具程序），libs（库文件） 组成格式 Linux设计思想，小工具组合完成复杂任务； 包和包之间存在依赖关系： X，Y，Z X –&gt; Y，Z ​ Y –&gt;A，B，C ​ C –&gt; Y 前端工具（自动解决复杂依赖关系）： YUM：rpm包的前端工具； APT：deb包的前端工具；（apt-get）（apt-cache） zypper：suse的rpm包管理工具；（比yum稍微好用） dnf：fedora22+系统上rpm包管理器的前端工具； 前端工具（apt，yum）配合后端（rpm，deb）管理工具，能提升使用效率； 程序包管理器：功能：将编译好的应用程序的各组成文件打包成一个或者几个程序包文件，从而更方便的实现程序包的安装、升级、卸载和查询等管理操作； 1.程序包的组成清单（每个程序包都单独实现）； ​ 文件清单 ​ 安装或卸载时运行的脚本； 2.数据库（公共） ​ 程序包名称和版本； ​ 依赖关系 ​ 功能说明； ​ 安装生成的各文件的文件路径及校验码信息； ​ 。。。 ​ /var/lib/rpm 获取程序包的途径：1.系统发行版的光盘或者官方的文件服务器（或者镜像站点）： 2.项目的官方站点 3.第三方组织： ​ （a）EPEL ​ （b）搜索引擎 ​ https://pkgs.org/ ​ https://rpmfind.net/ ​ http://rpm.pbone.net/ ​ 4.自己动手，丰衣足食 建议：检查其合法性 ​ 来源合法性；信任的组织发布的 ​ 程序包的完整性：检验MD5，SHA1 CentOS系统上的rpm命令管理程序包：安装、升级、卸载、查询和校验、数据库维护 rpm命令：​ rpm [option] [Package_FILE] ​ 安装： -i，–install ​ 升级：-U，–update，-F，–freshen ​ 卸载：-e，–erase ​ 查询：-q，–query ​ 校验：-V，–verify ​ 数据库维护：–build， ​ 安装：rpm -ivh（常用）rpm {-i|–install} [install-options] PACKAGE_FILE install-options： ​ -v，verbose 详细信息 ​ -vv，更详细的信息 ​ -h hash marks输出进度条；每个#表示2%的进度； ​ –test ：测试安装：不安装文件，仅检查并报告依赖关系、冲突错误。 ​ –nodeps：忽略依赖关系，安装完成之后不一定会可以使用。有些场景可使用。 ​ rpm -ivh –replacepkgs：重新安装； ​ –justdb：不安装包，只更新数据库； 注意：rpm可以自带脚本： 4类： ​ preinstall：安装过程开始之前运行的脚本，%pre ，–nopre（跳过执行脚本） ​ postinstall：安装过程完成之后运行的脚本，%post ， –nopost ​ preuninstall：卸载过程真正开始执行之前运行的脚本；%preun， –nopreun ​ postuninstall：卸载过程完成之后运行的脚本，%postun， –nopostun ​ –noscripts（跳过执行所有脚本） ​ –nosignature 跳过检查包签名信息，即不检查来源合法性 ​ –nodigest：不检查包完整性； 升级rpm {-U|–upgrade} [install-options] PACKAGE_FILE … rpm {-F|–freshen} [install-options] PACKAGE_FILE … ​ -U：升级或安装 ​ -F：升级 ​ rpm -Uvh PACKAGE_FILE… ​ rpm -Fvh PACKAGE_FILE… ​ –oldpackage：降级； ​ –force：强制升级； 注意：（1）不要对内核做升级操作；Linux支持多内核版本共存，因此，直接安装新版本内核即可； ​ （2）如果某原程序包的配置文件安装后曾被修改过，升级时，新版本的程序提供的同一个配置 文件不会覆盖原有版本的配置文件，而是把新版本的配置文件重命名（filename.rpmnew）后提供。 卸载rpm {-e|–erase} [–allmatches] [–justdb] [–nodeps] [–noscripts] [–notriggers] [–test] PACKAGE_NAME … ​ –allmatches：卸载所有匹配指定名称的程序包的各版本； ​ –nodeps：忽略依赖关系； ​ –test：测试卸载，dry run模式（干跑） 查询rpm {-q|–query} [select-options] [query-options] select-options： ​ package_name：查询指定的包是安装，及其版本； ​ -a，–all：查询所有已安装的包 ​ -f FILE：查询指定的文件由哪个程序包安装生成； ​ -g 查询指定包组包含哪些包； ​ -p，–package PACKAGE_FILE：用于实现对未安装的包执行查询操作； ​ –whatprovides CAPABILITY：查询指定的CAPABILITY由哪个程序包提供； ​ –whatrequires CAPABILITY：查询指定的CAPABILITY被哪个包依赖； query-options： ​ –changelog ：查看更新历史 ​ -c，–configfiles：列出程序包提供的配置文件 ​ -l ，–list：列出程序包安装生成的所有文件列表 ​ -i，–info：程序包相关的信息，版本号、大小、所属的包组、等； ​ -d，–docfiles：列出程序包提供的帮助文件列表 ​ –provides：列出程序包提供的所有CAPABILITY； ​ –whatrequires：查询指定程序包被谁所依赖； ​ -R，–requires：查询指定程序包的依赖关系； ​ –scripts：查询程序包自带的脚本片段； ​ -ql PAKAGE，-qf FILE，-qc PACKAGE，-ql PACKAGE，-qd PACKAGE； ​ -qpi PACKAGE_FILE，-qpl PACKAGE_FILE，-qpc PACKAGE_FILE 校验rpm {-V|–verify} [select-options] [verify-options] [--nodeps] [--nofiles] [--noscripts] [--nodigest] [--nosignature] [--nolinkto] [--nofiledigest] [--nosize] [--nouser] [--nogroup] [--nomtime] [--nomode] [--nordev] [--nocaps] [--noconfig] [--noghost] c %config configuration file. d %doc documentation file. g %ghost file (i.e. the file contents are not included in the package payload). l %license license file. r %readme readme file. S file Size differs M Mode differs (includes permissions and file type) 5 digest (formerly MD5 sum) differs D Device major/minor number mismatch L readLink(2) path mismatch U User ownership differs G Group ownership differs T mTime differs P caPabilities differ验证包来源合法性和完整性来源合法性验证： ​ 数字签名：非对称加密 ​ （计算特征码）–&gt;私钥加密特征码 –&gt;公钥解密验证（安全获得公钥）CA 完整性验证： ​ 获取并导入信任的包的制作者的密钥； ​ 对于centos发行版来说，导入光盘中的KEY文件 ​ 导入公钥： rpm –important RPM-GPG-KEY-CENTOS7 验证： ​ 1.安装此组织签名的程序时，会自动执行验证； ​ 2.手动验证：rpm -k PACKAGE_FILE 数据库重建rpm管理数据库路径：/var/lib/rpm ​ 查询操作：通过此处的数据库进行； 获取帮助： centos6：man rpm centos7：man rpmdb rpm {–initdb|–rebuilddb} rpm {–initdb|–rebuilddb} [-v] [–dbpath DIRECTORY] [–root DIRECTORY] ​ –initdb：初始化数据库，当前无任何数据库可初始化创建一个新的，当前有时不执行任何操作； ​ –rebuilddb：重新构建，通过读取当前系统上的所有已安装过的数据包进行重建； Debian 全球镜像站主要 Debian 镜像站 中国大陆 ftp2.cn.debian.org/debian/ amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x 中国大陆 ftp.cn.debian.org/debian/ amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x 次要 Debian 镜像站 中国大陆 ftp2.cn.debian.org /debian/ amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x ftp.cn.debian.org /debian/ amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x mirror.lzu.edu.cn /debian/ ALL amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x mirrors.163.com /debian/ amd64 i386 mirrors.bfsu.edu.cn /debian/ ALL amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x mirrors.huaweicloud.com /debian/ ALL amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x mirrors.tuna.tsinghua.edu.cn /debian/ amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x mirrors.ustc.edu.cn /debian/ amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x List of CentOS Mirrors Asia Bangladesh CoLoCity http://mirror.myfahim.com/centos/ Asia Bangladesh dhakaCom Limited http://mirror.dhakacom.com/centos/ Asia Bangladesh XeonBD http://mirror.xeonbd.com/centos/ Asia Cambodia Cambo.Host Ltd http://mirror.cambo.host/centos/ rsync://mirror.cambo.host/centos/ Asia China Alibaba Cloud Computing http://mirrors.aliyun.com/centos/ Asia China Beijing Foreign Studies University http://mirrors.bfsu.edu.cn/centos/ https://mirrors.bfsu.edu.cn/centos/ rsync://mirrors.bfsu.edu.cn/centos/ Asia China Beijing Institute of Technology http://mirror.bit.edu.cn/centos/ Asia China ChongQing University http://mirrors.cqu.edu.cn/CentOS/ https://mirrors.cqu.edu.cn/CentOS/ Asia China CN99 Corp. http://mirrors.cn99.com/centos/ Asia China Dalian Neusoft University of Information http://mirrors.neusoft.edu.cn/centos/","categories":[],"tags":[]},{"title":"7.压缩工具与shell编程","slug":"7-压缩工具与shell编程","date":"2020-05-31T20:26:54.000Z","updated":"2020-06-01T04:29:42.264Z","comments":true,"path":"2020/05/31/7-压缩工具与shell编程/","link":"","permalink":"http://yoursite.com/2020/05/31/7-%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7%E4%B8%8Eshell%E7%BC%96%E7%A8%8B/","excerpt":"","text":"压缩和解压缩压缩比，越大压缩后的文件越小压缩的目的：时间换空间CPU的时间：用CPU的运算时间换存储空间当cpu空闲时可以执行压缩，一定要知道压缩的目的。compress/uncompress: .Zgzip/gunzip: .gzbzip2/bunzip2: .bzxz/unxz: .xzzip/unziptarcpio 1.gzip/gunzip : gzip/gunzip,zcat compress or expand files zcat可以查看小的压缩后的gz文件，大文件不要使用zcat查看 gzip [option…] FILE… -d 解压缩，相当于gunzip; -# 指定压缩比，默认是6，越大越浪费cpu周期，一般默认即可； -c 输出至标准输出，不删除源文件； gzip -c files &gt; files.gz bzip2/bunzip2/zcat -d 解压缩 -# 指定压缩比，默认6 -k 保留源文件 bzip2 [option]… FILE… 3.xz/unxz/xzcatlzma/unlzma/lzcat xz [option]... FILE... -d 解压缩 -# 压缩比 -k 保留源文件这几种压缩工具都不支持对文件夹进行压缩，在linux上如果要压缩目录需要先归档； 归档 tar,cpio tar 目录可以不加‘-’; tar [option]… FILE… 1.创建归档 -c -c -f /PATH/to/FILE -cf cf 2.展开归档 -x 3.查看归档文件内的文件列表 -t 4.指定目录 -C归档并压缩-z：gziptar czf gzfile sourcefile…解压缩tar xzf gzfilez可省略，会自动判断文件类型 -j:bzip2-jcf-jxf -J :xz-Jcf-Jxf zip zip/unzip .zip zip file.zip file lftp下载文件 lftp [url/ip]/path/to/file lftp&gt;mget file Bash 脚本编程之用户交互： 脚本参数 可以直接与用户交互 交互：通过键盘输入数据，从而完成变量复制操作； 灵活的执行方式实现有2种方法： 通过传入参数 尽量避免与用户交互 read内嵌命令 help read read -p “message:” var [ -z $name ] &amp;&amp; echo “name is needed.” &amp;&amp; exit 2 如空可自行赋值： read -p “Enter name. [jack]:” name [ -z $name ] &amp;&amp; name=’Tom’ bash -n 检测语法错误 只能检查语法错误，逻辑错误无法检测 bash -x debug模式 按步执行,调试执行","categories":[],"tags":[]},{"title":"6.Bash脚本编程","slug":"6-Bash脚本编程","date":"2020-05-31T20:26:42.000Z","updated":"2020-06-01T04:29:29.687Z","comments":true,"path":"2020/05/31/6-Bash脚本编程/","link":"","permalink":"http://yoursite.com/2020/05/31/6-Bash%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/","excerpt":"","text":"脚本文件格式第一行写上#!/bin/bash注释信息 #代码注释：适当的缩进和空白行； 语言：编程语法格式，库，算法和数据结构；编程思想：问题空间 –&gt; 解空间 Bash是典型的弱类型的编程语言数据类型：字符型、整数值弱类型：字符型 变量：局部变量本地变量环境变量位置参数变量特殊变量 算数运算12345+, -, *, /, %, **let VAR=expressionVAR=$[expression]VAR=$((expression))VAR=$(expr argu1 argu2 argu3) 增强型赋值变量做某种算数运算后回存到此变量中； 12let i=$i+#let i+=# +=, -=, *=, /=, %= 条件测试：判断某需求是否满足；需要测试机制来实现； 执行命令，根据命令的返回值来判断；0：成功1-255： 失败 测试表达式；test expression[ expression ][[ expression ]]注意： expression两端必须有空白字符，否则为语法错误； Bash的测试类型： 数值测试 字符串测试 文字测试 数值测试： 数值比较；-eq： 是否等于；[ A -eq B ]; -ne： 是否不等于； -gt： 是否大于； -ge： 是否大于等于； -lt： 是否小于； -le： 是否小于等于；代码中的 [] 执行基本的算数运算，如： 1234567#!/bin/basha=5b=6result=$[a+b] # 注意等号两边不能有空格echo \"result 为： $result\" 字符串测试:1234567==： 是否等于；&gt;： 是否大于；&lt;： 是否小于；!=：是否不等于；=~： 左侧字符串是否能被右侧的PATTERN匹配；-z \"STRING\"： 判断指定的字符串是否为空；空为真，非空为假。-n \"STRING\"： 判断指定的字符串是否非空，非空为真，空为假； 注意： 字符串要加引用； 要使用[[ ]]; 文件测试： 存在测试： 12-a FILE-e FILE: 如果文件存在则为真 存在及类型测试： 123456789101112131415-b 如果文件存在且为块特殊文件则为真-c 如果文件存在且为字符型特殊文件则为真-d 如果文件存在且为目录则为真-f 如果文件存在且为普通文件则为真-h 链接文件-p 管道文件-S 套接字文件3. 文件权限测试：-r 存在且可读-w 存在且可写-x 存在且可执行4. 特殊权限测试：-u 存在且拥有suid-g 存在且拥有sgid-k 存在且拥有sticky 文件内容测试： 1-s 是否有内容 时间戳： 1-N FILE ：文件自上一次读操作后是否被修改； 从属关系测试： 12-O FILE：当前用户是否为文件的属主；-G FILE：当前用户是否为文件的属组； 双目测试： 123FILE1 -ef FILE2；FILE1与FILE2是否指向同一个文件系统的相同inode的硬链接；FILE1 -nt FILE2：FILE1是否新于FILE2；FILE1 -ot FILE2：FILE1是否旧于FILE2； 组合测试条件：逻辑运算： 123456789101. COMMAND1 &amp;&amp; COMMAND2 COMMAND1 || COMMAND2 !COMMAND [ -O FILE ] &amp;&amp; [ -r FILE ]2. EXPRESSION1 -a EXPRESSION2 EXPRESSION1 -O EXPRESSION2 !EXPRESSION [ -O FILE -a -x FILE ] 练习：将当前主机名称保存至hostname变量中：主机名如果为空，或者为localhost.localdomain,则将其设置为www.magedu.com; 123#!/bin/bashhostname=$(hostname)[ -z \"$hostname\" -o \"$hostname\"==\"localhost.localdomain\" -o \"$hostname\"==\"localhost\" ] &amp;&amp; hostname www.magedu.com 脚本的状态返回值：默认是脚本执行的最后一条命令的返回值；自定义状态退出状态码:exit [n]：n为自己指定的状态码；注意：SHELL进程遇到exit时，即会终止，因此整个脚本执行即为结束。 向脚本传递参数位置参数变量myscript.sh引用方式：$1,$2,$3…$10,$11…轮替：shift [n]: 位置参数轮替： 1234#!/bin/bashfile1_lines=$(grep \"^$\" $1 | wc -l)file2_lines=$(grep \"^$\" $2 | wc -l)echo \"Total blank lines: $[$file1_lines+$file2_lines]\" 特殊变量：1234$0:脚本文件路径本身;$#:脚本参数的个数；$*:所有参数 （分割为多个字符串）$@:所有参数 （合并为一个字符串） [ $# -lt 2 ] &amp;&amp; echo &quot;At least two files&quot; &amp;&amp; exit 1如果参数个数小于2个，提示至少需要2个参数，并退出，状态码1 过程式编程语言的代码执行顺序：顺序执行： 逐条执行；选择执行： 代码有一个分支： 条件满足时才会执行； 两个或以上的分支：只会执行其中一个满足条件的分支；循环执行： 某代码片段（循环体）要执行0、1或者多个来回；选择执行：单分支的if语句：if 测试条件then 代码分支fi 双分支的if语句if 测试条件；then 条件为真时执行的分支else 条件为假时执行的分支fi 示例： 通过参数传递一个用户名给脚本，此用户不存在时，则添加之； 1234567891011#!/bin/bash#[ $# -lt 1 ] &amp;&amp; echo \"At least one username.\" &amp;&amp; exit 1if ! grep \"^$1\\&gt;\" /etc/passwd &amp;&gt; /dev/null; then useradd $1 echo $1 | passwd --stdin $1 &amp;&gt; /dev/null echo \"Add user $1 finished.\"else echo \"user $1 exist.\"fi 练习1： 通过命令行参数给定两个数字，输出其中较大的数值；练习2： 通过命令行参数指定一个用户名，判断其ID号是偶数还是奇数；练习3： 通过命令行参数给定两个文本文件名，如果某文件不存在，则结束脚本执行； 都存在时返回每个文件的行数，并说明其中行数较多的文件；","categories":[],"tags":[]},{"title":"5.btrfs文件系统管理与应用","slug":"5-btrfs文件系统管理与应用","date":"2020-05-31T20:26:33.000Z","updated":"2020-06-01T04:29:09.297Z","comments":true,"path":"2020/05/31/5-btrfs文件系统管理与应用/","link":"","permalink":"http://yoursite.com/2020/05/31/5-btrfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/","excerpt":"","text":"技术预览版。GPL，开源版本 2007 ORACLE Cow；取代linux系统的ext系列文件系统B-treeButter FSBetter FS 特性多物理卷支持：可由多个底层物理卷组成，支持RAID，已联机添加、移除、修改；写入时复制（cow）：复制、更新、以及替换指针；而非传统的“就地”更新；数据及元数据校验码：checksum：极大的保证了数据的可靠性；子卷：sub_volume；快照：支持快照的快照；透明压缩:节约时间，但是会浪费CPU时钟周期；btrfsmkfs.btrfs 12345678910111213141516171819202122232425262728[root@Centos7 ~]# mkfs.btrfs btrfs-progs v4.9.1See http://btrfs.wiki.kernel.org for more information.Usage: mkfs.btrfs [options] dev [ dev ... ]Options: allocation profiles: -d|--data PROFILE data profile, raid0, raid1, raid5, raid6, raid10, dup or single -m|--metadata PROFILE metadata profile, values like for data profile -M|--mixed mix metadata and data together features: -n|--nodesize SIZE size of btree nodes -s|--sectorsize SIZE data block size (may not be mountable by current kernel) -O|--features LIST comma separated list of filesystem features (use '-O list-all' to list features) -L|--label LABEL set the filesystem label -U|--uuid UUID specify the filesystem UUID (must be unique) creation: -b|--byte-count SIZE set filesystem size to SIZE (on the first device) -r|--rootdir DIR copy files from DIR to the image root directory -K|--nodiscard do not perform whole device TRIM -f|--force force overwrite of existing filesystem general: -q|--quiet no messages except errors -V|--version print the mkfs.btrfs version and exit --help print this help and exit deprecated: -A|--alloc-start START the offset to start the filesystem -l|--leafsize SIZE deprecated, alias for nodesize -L LABEL -d : raid0, raid1, raid5, raid6, raid10, single, dup -O : raid0, raid1, raid5, raid6, raid10, single, dup ​ -O list-all: 列出支持的所有feature； 1234567[root@Centos7 ~]# mkfs.btrfs -O list-allFilesystem features available:mixed-bg - mixed data and metadata block groups (0x4, compat=2.6.37, safe=2.6.37)extref - increased hardlink limit per file to 65536 (0x40, compat=3.7, safe=3.12, default=3.12)raid56 - raid56 extended format (0x80, compat=3.9)skinny-metadata - reduced-size metadata extent refs (0x100, compat=3.10, safe=3.18, default=3.18)no-holes - no explicit hole extents for files (0x200, compat=3.14, safe=4.0) mkfs.btrfs -L mydata /dev/sdb /dev/sdc -f 1234567891011121314151617181920[root@Centos7 ~]# mkfs.btrfs -L mydata /dev/sdb /dev/sdc -fbtrfs-progs v4.9.1See http://btrfs.wiki.kernel.org for more information.Label: mydataUUID: 7c9e06ee-52ee-4350-b066-d23e980f6b88Node size: 16384Sector size: 4096Filesystem size: 20.00GiBBlock group profiles: Data: RAID0 2.00GiB Metadata: RAID1 1.00GiB System: RAID1 8.00MiBSSD detected: noIncompat features: extref, skinny-metadataNumber of devices: 2Devices: ID SIZE PATH 1 10.00GiB /dev/sdb 2 10.00GiB /dev/sdc 显示 12345[root@Centos7 ~]# btrfs filesystem showLabel: 'mydata' uuid: 7c9e06ee-52ee-4350-b066-d23e980f6b88 Total devices 2 FS bytes used 112.00KiB devid 1 size 10.00GiB used 2.01GiB path /dev/sdb devid 2 size 10.00GiB used 2.01GiB path /dev/sdc 之后就可以挂载使用了 mount -t btrfs /dev/sdc MOUNT_POINT 1234[root@Centos7 ~]# mkdir -pv /mnt/mydatamkdir: created directory ‘/mnt/mydata’[root@Centos7 ~]# mount -t btrfs /dev/sdsda sda1 sda2 sda3 sdb sdc 只要使用sdb和sdc效果一样 /dev/sdb on /mydata type btrfs (rw,relatime,seclabel,space_cache,subvolid=5,subvol=/) 卸载umount即可 透明压缩机制： mount -o compress={lzo|zlib} DEVICE MOUNT_POINT btrfs resize 增加： btrfs device add /dev/sd? mount_point balance均衡操作： btrfs balance {status|start|pause|cancel|resume} 联机拆除设备，不影响数据，会自动移动文件 btrfs device delete /dev/sd? mount_point 改变raid级别 btrfs balance start -dconvert=raid5 /mydata 数据块的 btrfs balance start -mconvert=raid5 /mydata 元数据的 子卷： btrfs subvolume 创建：create 12[root@Centos7 ~]# btrfs subvolume create /mydata/logsCreate subvolume '/mydata/logs' 列出； list btrfs subvolume list /mydata 只挂载子卷： 先卸载父卷 mount -o subvol=logs /dev/sdb /mydata/ 使用子卷ID挂载： mount -o subvolid=1 /dev/sdb /mydata 子卷删除： btrfs subvolume delete /mydata/logs 创建快照： 子卷的快照必须与子卷在一个父卷中： btrfs subvolume snapshot /mydata/logs /mydata/log_snapshot 删除: btrfs subvolume delete /mydata/logs_snapshot/ 对一个文件创建快照： cp –reflink file file_snapshot 另一个文件最好在当前卷下某个路径下 无损转换文件系统： ext4转换为btrfs fsck -f device btrfs-convert device 回滚为ext4 btrfs-convert -r device blkid","categories":[],"tags":[]},{"title":"Linux实现LVM逻辑卷及快照","slug":"4-Linux实现LVM逻辑卷及快照","date":"2020-05-31T20:26:12.000Z","updated":"2020-06-01T04:28:23.765Z","comments":true,"path":"2020/05/31/4-Linux实现LVM逻辑卷及快照/","link":"","permalink":"http://yoursite.com/2020/05/31/4-Linux%E5%AE%9E%E7%8E%B0LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%8F%8A%E5%BF%AB%E7%85%A7/","excerpt":"","text":"LVM2Logical Volume Manager, Version2; dm device mapper:将一个或者多个底层块设备组织成一个逻辑设备; PV查看 : pvs #简要; pvdisplay #详细;创建 : pvcreate /dev/DEVICE VG查看: vgs vgdisplay创建: vgcreate VG_NAME PV_DEVICE -s PE大小 -P 最大PV数 例如： vgcreate myvg /dev/sdb1 /dev/sdc1 扩展： vgextend vgNAME PhysicalDevicePath [PhysicalDevicePath] #扩展;缩减： vgreduce vgNAME PhysicalDevicePath [PhysicalDevicePath] #缩减;修改删除顺序执行 lvremove vgremove pvremove LV查看 lvs #简要; lvdisplay #详细;创建 lvcreate -L #[mMgGtT] -n NAME VolumeGroup(VG) 修改扩容： 逻辑边界 物理空间lvextend -L #目标大小 [+][mMgGtT] #要增加的大小 /dev/VG_NAME/LV_NAME #扩展物理大小; example: lvextend –size +2g /dev/testvg/testlv resize2fs /dev/VG_NAME/LV_NAME #重新设置分区大小; 缩减： 逻辑边界 #先卸载文件系统，离线进行，在线有文件丢失风险; 物理空间umount /dev/VG_NAME/LV_NAMEe2fsck -f /dev/VG_NAME/LV_NAMEresize2fs /dev/VG_NAME/LV_NAME #[mMgGtT]lvreduce -L [-][mMgGtT] /dev/VG_NAME/LV_NAME #注意 -L 和 + 的区别；# 如果是其他文件系统，使用其他工具;mount删除：lvremove /dev/VG_NAME/LV_NAMEvgremovepvremove 练习1:创建一个至少有两个PV组成的大小为20G的名为testvg的VG；要求PE大小为16MB；而后在卷组中创建大小为5G的逻辑卷testlv；挂载至/users目录； pvcreate /dev/sdb1 /dev/sdc1 vgcreate -s 16m testvg /dev/sdb1 /dev/sdc1 lvcreate -L 5G -n testlv testvg mkfs -v -t ext4 /dev/mapper/testvg-testlv mkdir -pv /users mount /dev/mapper/testvg-testlv /users/ 练习2：新建用户archlinux，要求其家目录为/users/archlinux, 而后su切换至archlinux用户，复制/etc/pam.d目录至自己的家目录； mkdir -pv /users/archlinux useradd -d /users/archlinux/ archlinux su archlinux cp -av /etc/pam.d ~ 练习3：扩展testlv至7G，要求archlinux用户的文件不能丢失； umount /dev/mapper/testvg-testlv lvextend -L 7g /dev/testvg/testlv e2fsck -f /dev/mapper/testvg-testlv resize2fs /dev/mapper/testvg-testlv 7g mount /dev/mapper/testvg-testlv /users/ 练习4：收缩testlv至3G，要求archlinux用户的文件不能丢失； umount /dev/mapper/testvg-testlve2fsck -f /dev/mapper/testvg-testlvresize2fs /dev/mapper/testvg-testlv 3glvreduce -L 3g /dev/testvg/testlvmount /dev/mapper/testvg-testlv /users/ 文件系统挂载使用中的问题：挂载光盘设备：光盘设备文件: /dev/ IDE: /dev/hdc SATA: /dev/sr0符号链接文件： /dev/cdrom /dev/dvdrom /dev/dvd 挂载：mkdir -pv /medir/cdrommount -r /dev/sr0 /media/cdrom U 盘的挂载：新挂载的设备，以大小来判断： /dev/sdx fdisk -l 一个小命令的应用DD： 一个实现文件底层拷贝的工具复制命令convert and copy a file用法：dd if=/PATH/FROM/SRC of=/PATH/TO/DESTbs=# blocksize 块大小 默认为字节；count=# 数量 多少个上面的块；因为是复制的底层实现，所以拷贝效率高：直接拷贝磁盘：dd if=/dev/sda of=/dev/sdb 备份MBRdd if=/dev/sda of=/mbr.bak bs=512 count=1 损坏MBR #瞬间让一个磁盘分区表失效dd if=/dev/zero of=/dev/sda bs=512 count=1 精准破坏BootLoader：dd if=/dev/zero of=/dev/sda bs=256 count=1 两个特殊设备：/dev/null 数据黑洞/dev/zero 吐零机 测试硬盘系统读写速度：dd if=/dev/zero of=/dev/null bs=1G count=2 快照： snapshot对文件系统做快照，相当于对文件系统在某一时间做一次快速扫描，备份序列化文件序列化后如何还原；因为备份的时间短，在备份时后面的数据如果发生改变的话，会造成备份后的数据和原来想要备份的不一样所以需要对文件做一次快照；快照卷，类似于硬链接，执行原来的文件，本来是不存在任何数据的，监控原数据，任何时刻，当文件要变化时，拷贝一份； 使用 LVM 创建 Linux 快照lvcreate -s [-L &lt;size&gt;] -n SNAP_VOLUME SOURCE_VOLUME_PATH如果不指定大小，快照会创建为瘦快照。lvcreate -s -L 1G -n linux01-snap /dev/lvm/linux01快照将被创建为 /dev/lvm/linux01-snap 卷。 -p #读写权限 -s -n snapshot_lv_name 监视快照lvdisplay SNAP_VOLUME 删除 Linux 快照lvremove SNAP_VOLUME_PATH 例如：sudo lvremove /dev/lvmvg/linux01-snap 存储快照的原理： 快照是完全可用的拷贝，但不是一份完整的拷贝; 存储快照的使用场景:场景一：存储快照，是一种数据保护措施，可以对源数据进行一定程度的保护，通俗地讲，可以理解为—-后悔药。如上图，假设在t0时刻，有一份完整的源数据，我们在t1时刻，针对这份源数据创建一份快照。 t2时刻，若因为各种原因（误操作、系统错误等）导致源数据损毁，那么，我们可以通过回滚（rollback）快照，将源数据恢复至快照创建时的状态（即t1时刻），这样，可以尽量降低数据损失（损失的数据，是t1到t2之间产生的数据）。 这种功能，常用于银行、公安户籍、科研单位等。操作系统、软件升级或机房设备更替，一般会选择在夜间或其他无生产业务时，进行高危操作，操作前会对数据进行快照，若操作失败，则将快照进行rollback，将源数据恢复至操作前的状态。 场景2：前面说过，快照是一份完全可用的副本，那么，它完全可以被上层业务当做源数据;如上图，针对源数据，创建快照后，将快照卷映射给其他上层业务，可以用于数据挖掘和开发测试等工作，针对快照的读操作不影响源卷的数据。 这种功能，常用于直播（视频&amp;图片）鉴黄、科研数据模拟开发测试等，比如，视频直播平台需要将某一段时间的视频提供给执法机构进行筛查分析，那么可以通过对特定时间点保存的数据创建快照，将快照映射给执法机构的业务主机去进行挖掘分析。 存储快照的实现原理目前，快照的实现方式均由各个厂商自行决定，但主要技术分为2类，一种是写时拷贝COW（Copy On Write），另一种，是写重定向ROW（Redirect On Write）。 写时拷贝COWCOW(Copy-On-Write)，写时拷贝，也称为写前拷贝。创建快照以后，如果源卷的数据发生了变化，那么快照系统会首先将原始数据拷贝到快照卷上对应的数据块中，然后再对源卷进行改写。 写操作： 如上图简要示例，快照创建以后，若上层业务对源卷写数据X，X在缓存中排队，快照系统将X即将写入的位置（逻辑地址）上的数据Y，拷贝到快照卷中对应的位置（逻辑地址）上，同时，生成一张映射表，表中一列记录源卷上数据变化的逻辑地址，另一列记录快照卷上数据变化的逻辑地址。我们可以看到，上层业务每下发一个数据块，存储上，发生了两次写操作：一次是源卷将数据写入快照卷（即图中Y），一次是上层业务将数据写入源卷（即图中X）。 读操作： 如上图，快照卷若映射给上层业务进行数据分析等用途时，针对快照进行读操作时，首先由快照系统判断，上层业务需要读取的数据是否在快照卷中，若在，直接从快照卷读取，若不在，则查询映射表，去对应源卷的逻辑地中读取（这个查表并去源卷读的操作，也叫读重定向）。这一点，恰好就解释了为什么快照是一份完全可用的副本，它没有对源卷进行100%的拷贝，但对上层业务来说，却可以将快照看做是和源卷“一模一样”的副本。 针对源卷进行读操作时，与快照卷没有数据交互。 我们可以看到，快照对源卷的数据具有很好的保护措施，快照可以单独作为一份可以读取的副本，但并没有像简单的镜像那样，一开始就占用了和源卷一样的空间，而是根据创建快照后上层业务产生的数据，来实时占用必需的存储空间。 快照回滚（rollback）： 如上图，回滚操作的前提条件是，锁定源卷（暂停对待回滚的逻辑地址上的IO操作），然后通过查映射表，将快照卷上的对应数据回拷到源卷中。 快照删除： 采用COW技术的快照，其源卷即保存着完整的实时数据，因此，删除快照时，直接销毁了快照卷和映射表，与源卷不存在数据交互。 写时重定向ROWROW(Redirect-on-write )，也称为写时重定向。 创建快照以后，快照系统把对数据卷的写请求重定向给了快照预留的存储空间，直接将新的数据写入快照卷。上层业务读源卷时，创建快照前的数据从源卷读，创建快照后产生的数据，从快照卷读。 写操作： 如上图简要示例，快照创建以后，若上层业务对源卷写数据X，X在缓存中排队，快照系统判断X即将写入源卷的逻辑地址，然后将数据X写入快照卷中预留的对应逻辑地址中，同时，将源卷和快照卷的逻辑地址写入映射表，即写重定向。我们可以看到，上层针对源卷写入一个数据块X，存储上只发生一次写操作，只是写之前进行了重定向。 读操作： 若快照创建以后，上层业务对源卷进行读，则有两种情况：1）若读取的数据，在创建快照前产生，数据是保存在源卷上的，那么，上层就从源卷进行读取；2）若需要读取的数据是创建快照以后才产生的，那么上层就查询映射表，从快照卷进行读取（即读重定向）。 若快照创建以后，上层业务对快照卷进行读，同样也有两种情况：1）若读取的数据，在创建快照前产生，数据是保存在源卷上的，那么上层就查询映射表，从源卷进行读取；2）若需要读取的数据是创建快照以后才产生的，那么上层就直接从快照卷进行读取。 我们可以看到，ROW快照也是根据创建快照后上层业务产生的数据，来实时占用必需的存储空间。 快照回滚（rollback）： 采用ROW技术的快照，其源卷始终保存着快照创建前的完整数据，快照创建后，上层业务产生的数据都写入了快照中，因此，快照的回滚只是取消了对源卷的读重定向操作。通俗地说，就是源卷上没有进行任何数据操作，上层业务对源卷的读，仅限于读源卷（即不会去读取快照卷的数据）。 快照删除：采用ROW技术的快照，其源卷始终保存着快照创建前的完整数据，快照创建后，上层业务产生的数据都写入了快照中。因此，若要删除快照，必然要先将快照卷中的数据，回拷到源卷中，拷贝完成才能删除，如上图。此时我们可以设想，如果，针对一份源数据，在18:00创建了快照，上层业务持续产生大量新的数据，19:00又创建了快照，20:00又创建了快照……那么，在有多份快照的情况下，如果需要删除快照，就会出现，多个快照向源卷回拷数据的情况，可能导致回拷量非常大，耗时很长。 两种技术对比 如上表，COW的写时拷贝，导致每次写入都有拷贝操作，大量写入时，源卷的写性能会有所下降，而读源卷是不会受到任何影响的，删除快照时，只是解除了快照和源卷的关系，同时删除了快照卷的数据而已。ROW在每次写入仅做了重定向操作，这个操作耗时是几乎可以忽略不计的，源卷的写性能几乎不会受到影响，但读源卷时，则需要判断数据是创建快照前还是创建快照后，导致大量读时，性能受到一定影响，比较致命的是，若源卷有多个快照，在删除快照时，所有快照的数据均需要回拷到源卷才可以保证源卷数据的完整性。 总结：上面简单地介绍了存储快照的实现原理，实际上，快照特性应用广泛，其应用对象是很多的： 目前，主流厂商在自研产品上，对上面的ROW和COW技术都有小范围的改动，也有一些新兴的快照技术已经诞生，但这个行业里，没有最好的快照技术。技术为业务服务，只有针对业务类型做好本地化适配，才能达到最佳效用。 参考知乎：揭秘：存储快照的实现LVM 卷快照逻辑卷 (LVM)","categories":[],"tags":[]},{"title":"Linux平台RAID","slug":"3-Linux平台RAID","date":"2020-05-06T05:23:39.000Z","updated":"2020-05-06T13:58:39.383Z","comments":true,"path":"2020/05/06/3-Linux平台RAID/","link":"","permalink":"http://yoursite.com/2020/05/06/3-Linux%E5%B9%B3%E5%8F%B0RAID/","excerpt":"","text":"RAIDRedundant Array of Independent Disks 独立硬盘冗余阵列,旧称廉价磁盘冗余阵列.简称磁盘阵列。利用虚拟化存储技术把多个硬盘组合起来，成为一个或多个硬盘阵列组，目的为提升性能或数据冗余，或是两者同时提升。 在运作中，取决于 RAID 层级不同，数据会以多种模式分散于各个硬盘，RAID 层级的命名会以 RAID 开头并带数字，例如：RAID 0、RAID 1、RAID 5、RAID 6、RAID 7、RAID 01、RAID 10、RAID 50、RAID 60。每种等级都有其理论上的优缺点，不同的等级在两个目标间获取平衡，分别是增加数据可靠性以及增加存储器（群）读写性能。 简单来说，RAID把多个硬盘组合成为一个逻辑硬盘，因此，操作系统只会把它当作一个实体硬盘。RAID常被用在服务器电脑上，并且常使用完全相同的硬盘作为组合。由于硬盘价格的不断下降与RAID功能更加有效地与主板集成，它也成为普通用户的一个选择，特别是需要大容量存储空间的工作，如：视频与音频制作。 RAID等级 最少硬盘 最大容错 可用容量 读取性能 写入性能 安全性 目的 应用产业 0 2 0 n n n 一个硬盘异常，全部硬盘都会异常 追求最大容量、速度 影片剪接缓存用途 1 2 n-1 1 n 1 高，一个正常即可 追求最大安全性 个人、企业备份 5 3 1 n-1 n-1 n-1 高 追求最大容量、最小预算 个人、企业备份 6 4 2 n-2 n-2 n-2 安全性较RAID 5高 同RAID 5，但较安全 个人、企业备份 10 4 高 综合RAID 0/1优点，理论速度较快 大型数据库、服务器 50 6 高 提升数据安全 60 8 高 提升数据安全 单一硬盘 (参考) 0 1 1 1 无 jBOD 1 0 n 1 1 无（同RAID 0） 增加容量 个人（暂时）存储备份 标准RAID参数说明1. n代表硬盘总数 2. JBOD（Just a Bunch Of Disks）指将数个物理硬盘，在操作系统中合并成一个逻辑硬盘，以直接增加容量 3. 依不同 RAID 厂商实现算法对于性能表现会有不同，性能公式仅供参考 4. RAID 10、50、60 依实现 Parity 不同公式也不同RAID 0它将两个以上的磁盘并联起来，成为一个大容量的磁盘。在存放数据时，分段后分散存储在这些磁盘中，因为读写时都可以并行处理，所以在所有的级别中，RAID 0的速度是最快的。但是RAID 0既没有冗余功能，也不具备容错能力，如果一个磁盘（物理）损坏，所有数据都会丢失。 读写性能提升：可用空间：N*min(S1,S2…)无容错能力最小磁盘数:2 RAID 1两组以上的N个磁盘相互作镜像，在一些多线程操作系统中能有很好的读取速度，理论上读取速度等于硬盘数量的倍数，与RAID 0相同。另外写入速度有微小的降低。只要一个磁盘正常即可维持运作，可靠性最高。其原理为在主硬盘上存放数据的同时也在镜像硬盘上写一样的数据。当主硬盘（物理）损坏时，镜像硬盘则代替主硬盘的工作。因为有镜像硬盘做数据备份，所以RAID 1的数据安全性在所有的RAID级别上来说是最好的。但无论用多少磁盘做RAID 1，仅算一个磁盘的容量，是所有RAID中磁盘利用率最低的一个级别。 读性能提升、写性能略微下降：可用空间：1*min(S1,S2…)有冗余能力最少磁盘数：2 RAID 2 (不常见)这是RAID 0的改良版，以汉明码（Hamming Code）的方式将数据进行编码后分割为独立的比特，并将数据分别写入硬盘中。因为在数据中加入错误修正码（ECC，Error Correction Code），所以数据整体的容量会比原始数据大一些。 RAID 2最少要三台磁盘驱动器方能运作。 RAID 3 (不常见)采用Bit－interleaving（数据交错存储）技术，它需要通过编码再将数据比特分割后分别存在硬盘中，而将同比特检查后单独存在一个硬盘中，但由于数据内的比特分散在不同的硬盘上，因此就算要读取一小段数据资料都可能需要所有的硬盘进行工作，所以这种规格比较适于读取大量数据时使用。 RAID 4它与RAID 3不同的是它在分割时是以区块为单位分别存在硬盘中，但每次的数据访问都必须从同比特检查的那个硬盘中取出对应的同比特数据进行核对，由于过于频繁的使用，所以对硬盘的损耗可能会提高。（块交织技术，Block interleaving）1101,0110,1011 RAID 5RAID Level 5是一种储存性能、数据安全和存储成本兼顾的存储解决方案。它使用的是Disk Striping（硬盘分割）技术。 RAID 5至少需要三个硬盘，RAID 5不是对存储的数据进行备份，而是把数据和相对应的奇偶校验信息存储到组成RAID5的各个磁盘上，并且奇偶校验信息和相对应的数据分别存储于不同的磁盘上。当RAID5的一个磁盘数据发生损坏后，可以利用剩下的数据和相应的奇偶校验信息去恢复被损坏的数据。RAID 5可以理解为是RAID 0和RAID 1的折衷方案。RAID 5可以为系统提供数据安全保障，但保障程度要比镜像低而磁盘空间利用率要比镜像高。RAID 5具有和RAID 0相近似的数据读取速度，只是因为多了一个奇偶校验信息，写入数据的速度相对单独写入一块硬盘的速度略慢，若使用“回写缓存”可以让性能改善不少。同时由于多个数据对应一个奇偶校验信息，RAID 5的磁盘空间利用率要比RAID 1高，存储成本相对较便宜。 读写性能提升可用空间：(N-1)*min(S1,S2…)有容错能力，1块硬盘最少磁盘数3 RAID 6读写性能提升可用空间：(N-2)*min(S1,S2…)有容错能力，2块硬盘最少磁盘数4 混合RAIDJBODjust a bunch of disks功能：将多块硬盘的空间合并一个大的连续空间使用；可用功能：sum(S1,S2…) RAID 10读写性能提升可用空间：N*min(S1,S2…)/2有容错能力：每组镜像最多只能坏一块；最少磁盘数4 RAID 01 RAID 50 RAID 60 应用RAID2、3、4较少实际应用，因为RAID0、RAID1、RAID5、RAID6和混合RAID已经涵盖所需的功能，因此RAID2、3、4大多只在研究领域有实现，而实际应用上则以RAID0、RAID1、RAID5、RAID6和混合RAID为主。 RAID4有应用在某些商用机器上，像是NetApp公司设计的NAS系统就是使用RAID4的设计概念。 种类根据实现模式，分为软件和硬件两种：CentOS6上面 软件方式实现：结合内核中的md(multi devices)mdadm 模式化的工具 命令的语法格式： mdadm [mode] &lt;raiddevice&gt; [options] &lt;componet-devices&gt;支持的RAID级别：LINEAR,RAID0,RAID1,RAID4,RAID5,RAID6,RAID10; 模式： 123创建： -C装配： -A监控： -F 12345678910管理： -f， -r， -a &lt;raiddevice&gt;: &#x2F;dev&#x2F;md# &lt;component-devices&gt;: 任意块设备-C: 创建模式： -n #: 使用#个块设备来创建此RAID； -l #: 指明要创建的RAID的级别； -a: &#123;yes| no&#125; 自动创建目标RAID设备的设备文件； -c: CHUNK_SIZE 指定块大小 -x: 指明空闲盘的个数 例如：创建一个10G可用空间的RAID5； 创建mdadm -C /dev/md0 -a yes -n 3 -x 1 -l 5 /devsda{7,8,9,10}格式化mkfs -v -t ext4 /dev/md0挂载使用：mount /dev/md0 MOUNT_POINT 显示设备信息:-D：显示RAID的详细信息；mdadm -D /dev/md# 管理模式：-f 标记指定磁盘为损坏；mdadm /dev/md0 -fdev/sda# -a 添加磁盘mdadm /dev/md0 -adev/sda# -r 移除磁盘mdadm /dev/md0 -rdev/sda# 观察md的状态；cat /proc/mdstat 停止md设备mdadm -S /dev/md# 先卸载设备umount /dev/md0mdadm -S /dev/md0 watch 命令：-n # 刷新间隔，单位是秒watch -n# &quot;command&quot; 练习1：创建一个可用空间为10G的RAID1设备，要求其chunk大小为128k，文件系统为ext4，有一个空闲盘，开机可自动挂载至/backup目录； 123mdadm -C /dev/md0 -c 128K -x 1 -n 2 -l 1 -a yes /deb/sda&#123;5,6,7&#125;mkfs -v -t ext4echo \"`blkid /dev/md0 | awk '&#123;print $3&#125;'` /backup ext4 defaults 0 0\" &gt;&gt; /etc/fstab 练习2：创建一个可用空间为10G的RAID10设备，要求chunk大小为256k，文件系统为ext4，开机可自动挂载至/mydata目录； 123mdadm -C /dev/md0 -c 256K -n 4 -l 10 -a yes /dev/sdb&#123;7,8,9,10&#125;mkfs -v -t ext4echo \"`blkid /dev/md0 | awk '&#123;print $3&#125;'` /mydata ext4 defaults 0 0\" &gt;&gt; /etc/fstab 磁盘阵列相关客户类型 一般消费者备份数据之用、企业创建ERP系统或NAS系统时的重要数据备份。 影音多媒体数字内容创作公司、个人影音剪辑数字内容工作室、摄影工作室、摄影公司。 电视台、广播电台及互联网内容提供商等传统媒体及新媒体。 数字监控系统（DVR）、网络监控系统（NVR）等等需要大量存储影片的监控系统业者，军方、赌场因为需要大量监控系统也是常见使用磁盘阵列的客户。 证券、银行等金融行业保管重要客户数据。 参考Arch Wiki 常用级别：RAID-0、RAID-1、RAID-5、RAID-10、RAID-50、JBOD ????RAID各级别特性","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"磁盘","slug":"磁盘","permalink":"http://yoursite.com/tags/%E7%A3%81%E7%9B%98/"},{"name":"文件系统","slug":"文件系统","permalink":"http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"name":"RAID","slug":"RAID","permalink":"http://yoursite.com/tags/RAID/"}]},{"title":"progit","slug":"101-progit","date":"2020-05-06T05:23:11.000Z","updated":"2020-05-06T13:58:39.387Z","comments":true,"path":"2020/05/06/101-progit/","link":"","permalink":"http://yoursite.com/2020/05/06/101-progit/","excerpt":"","text":"版本控制–&gt; 版本控制系统–&gt;本地版本控制系统–&gt;集中化的版本控制系统–&gt;分布式版本控制系统 Git 是什么？分布式版本控制系统客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像 下来，包括完整的历史记录。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像 出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份. 直接记录快照，而非差异比较 快照流 近乎所有操作都是本地执行 Git 保证完整性 Git 用以计算校验和的机制叫做 SHA-1 散列 Git 数据库中保存的信息都是以文件内 容的哈希值来索引，而不是文件名. Git 一般只添加数据 三种状态 已提交（committed） 已提交表示数据已经安全地保存在本地数据库中. 已修改（modified） 修改了文件，但还没保存到数据库中。 已暂存（staged） 示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。 这会让我们的 Git 项目拥有三个阶段：工作区、暂存区以及 Git 目录。 工作区是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上 供你使用或修改。 暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。 按照 Git 的术语叫做“索 引”，不过一般说法还是叫“暂存区”。 Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆 仓库时，复制的就是这里的数据。 基本的 Git 工作流程如下： 在工作区中修改文件。 将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。 提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。 如果 Git 目录中保存着特定版本的文件，就属于 已提交 状态。 如果文件已修改并放入暂存区，就属于 已暂存 状 态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是 已修改 状态. 安装从源代码安装 :从源码安装 Git，需要安装 Git 依赖的库：autotools、curl、zlib、openssl、expat 和 libiconv。 123$ sudo dnf install dh-autoreconf curl-devel expat-devel gettext-devel \\ openssl-devel perl-devel zlib-devel $ sudo apt-get install dh-autoreconf libcurl4-gnutls-dev libexpat1-dev \\ gettext libz-dev libssl-dev 为了添加文档的多种格式（doc、html、info），需要以下附加的依赖： 12$ sudo dnf install asciidoc xmlto docbook2X $ sudo apt-get install asciidoc xmlto docbook2x 使用 RHEL 和 RHEL 衍生版，如 CentOS 和 Scientific Linux 的用户需要 开启 EPEL 库 以便下 载 docbook2X 包。 使用基于 Debian 的发行版（Debian/Ubuntu/Ubuntu-derivatives），你也需要 install-info 包：$ sudo apt-get install install-info 如果你使用基于 RPM 的发行版（Fedora/RHEL/RHEL衍生版），你还需要 getopt 包 （它已经在基于 Debian 的发行版中预装了）：sudo dnf install getopt 此外，如果你使用 Fedora/RHEL/RHEL衍生版，那么你需要执行以下命令：$ sudo ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2x-texi 当你安装好所有的必要依赖，你可以继续从几个地方来取得最新发布版本的 tar 包。 你可以从 Kernel.org 网站 获取，网址为 https://www.kernel.org/pub/software/scm/git， 或从 GitHub 网站上的镜像来获得，网址为 https://github.com/git/git/releases。 通常在 GitHub 上的是最新版本，但 kernel.org 上包含有文件下载签 名，如果你想验证下载正确性的话会用到。 123456tar -zxf git-2.8.0.tar.gzcd git-2.8.0make configure./configure --prefix=/usr make all doc infomake install install-doc install-html install-info 完成后，你可以使用 Git 来获取 Git 的更新：git clone git://git.kernel.org/pub/scm/git/git.git Git 基础获取 Git 仓库通常有两种获取 Git 项目仓库的方式： 将尚未进行版本控制的本地目录转换为 Git 仓库； 从其它服务器 克隆 一个已存在的 Git 仓库。 两种方式都会在你的本地机器上得到一个工作就绪的 Git 仓库。 如果在一个已存在文件的文件夹（而非空文件夹）中进行版本控制，你应该开始追踪这些文件并进行初始提交。 可以通过 git add 命令来指定所需的文件来进行追踪，然后执行 git commit ： 123$ git add *.c $ git add LICENSE $ git commit -m 'initial project version' 克隆现有的仓库 git clone &lt;url&gt; 工作目录中除已跟踪文件外的其它所有文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有被放 入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为 Git 刚刚检出了它们， 而你尚未编辑过它们。 检查当前文件状态 git status 跟踪新文件 git add 忽略文件 一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文 件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式。 来看一个实际的 .gitignore 例子： 123$ cat .gitignore *.[oa] *~ 第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二 行告诉 Git 忽略所有名字以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存 副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就为你的 新仓库设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件 我们再看一个 .gitignore 文件的例子： 123456789101112# 忽略所有的 .a 文件 *.a # 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件 !lib.a # 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO /TODO # 忽略任何目录下名为 build 的文件夹 build/ # 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt doc/*.txt # 忽略 doc/ 目录及其所有子目录下的 .pdf 文件 doc/**/*.pdf 查看已暂存和未暂存的修改 要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 git diff; 若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --staged 命令。 这条命令将比对已暂存 文件与最后一次提交的文件差异; 然后用 git diff --cached 查看已经暂存起来的变化（ –staged 和 –cached 是同义词）; 提交更新 git commit 你也可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行 请记住，提交时记录的是放在暂存区域的快照。 任何还未暂存文件的仍然保持已修改状态，可以在下次提交时 纳入版本管理。 每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较 跳过使用暂存区域 尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。 Git 提供了一个跳过使用暂 存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存 起来一并提交，从而跳过 git add 步骤： 123$ git commit -a -m 'added new benchmarks'[master 83e38c7] added new benchmarks1 file changed, 5 insertions(+), 0 deletions(-) 移除文件 要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清 单中了。 查看提交历史 git log","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"版本控制","slug":"版本控制","permalink":"http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"}]},{"title":"Bash脚本编程","slug":"100-Bash脚本编程","date":"2020-05-06T05:22:33.000Z","updated":"2020-05-06T13:58:39.383Z","comments":true,"path":"2020/05/06/100-Bash脚本编程/","link":"","permalink":"http://yoursite.com/2020/05/06/100-Bash%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/","excerpt":"","text":"脚本文件格式第一行写上#!/bin/bash注释信息 #代码注释：适当的缩进和空白行； 语言：编程语法格式，库，算法和数据结构；编程思想：问题空间 –&gt; 解空间 Bash是典型的弱类型的编程语言数据类型：字符型、整数值弱类型：字符型 变量：局部变量本地变量环境变量位置参数变量特殊变量 算数运算12345+, -, *, /, %, **let VAR=expressionVAR=$[expression]VAR=$((expression))VAR=$(expr argu1 argu2 argu3) 增强型赋值变量做某种算数运算后回存到此变量中； 12let i=$i+#let i+=# +=, -=, *=, /=, %= 条件测试：判断某需求是否满足；需要测试机制来实现； 执行命令，根据命令的返回值来判断；0：成功1-255： 失败 测试表达式；test expression[ expression ][[ expression ]]注意： expression两端必须有空白字符，否则为语法错误； Bash的测试类型： 数值测试 字符串测试 文字测试 数值测试： 数值比较；-eq： 是否等于；[ A -eq B ]; -ne： 是否不等于； -gt： 是否大于； -ge： 是否大于等于； -lt： 是否小于； -le： 是否小于等于；代码中的 [] 执行基本的算数运算，如： 1234567#!/bin/basha=5b=6result=$[a+b] # 注意等号两边不能有空格echo \"result 为： $result\" 字符串测试:1234567==： 是否等于；&gt;： 是否大于；&lt;： 是否小于；!=：是否不等于；=~： 左侧字符串是否能被右侧的PATTERN匹配；-z \"STRING\"： 判断指定的字符串是否为空；空为真，非空为假。-n \"STRING\"： 判断指定的字符串是否非空，非空为真，空为假； 注意： 字符串要加引用； 要使用[[ ]]; 文件测试： 存在测试： 12-a FILE-e FILE: 如果文件存在则为真 存在及类型测试： 123456789101112131415-b 如果文件存在且为块特殊文件则为真-c 如果文件存在且为字符型特殊文件则为真-d 如果文件存在且为目录则为真-f 如果文件存在且为普通文件则为真-h 链接文件-p 管道文件-S 套接字文件3. 文件权限测试：-r 存在且可读-w 存在且可写-x 存在且可执行4. 特殊权限测试：-u 存在且拥有suid-g 存在且拥有sgid-k 存在且拥有sticky 文件内容测试： 1-s 是否有内容 时间戳： 1-N FILE ：文件自上一次读操作后是否被修改； 从属关系测试： 12-O FILE：当前用户是否为文件的属主；-G FILE：当前用户是否为文件的属组； 双目测试： 123FILE1 -ef FILE2；FILE1与FILE2是否指向同一个文件系统的相同inode的硬链接；FILE1 -nt FILE2：FILE1是否新于FILE2；FILE1 -ot FILE2：FILE1是否旧于FILE2； 组合测试条件：逻辑运算： 123456789101. COMMAND1 &amp;&amp; COMMAND2 COMMAND1 || COMMAND2 !COMMAND [ -O FILE ] &amp;&amp; [ -r FILE ]2. EXPRESSION1 -a EXPRESSION2 EXPRESSION1 -O EXPRESSION2 !EXPRESSION [ -O FILE -a -x FILE ] 练习：将当前主机名称保存至hostname变量中：主机名如果为空，或者为localhost.localdomain,则将其设置为www.magedu.com; 123#!/bin/bashhostname=$(hostname)[ -z \"$hostname\" -o \"$hostname\"==\"localhost.localdomain\" -o \"$hostname\"==\"localhost\" ] &amp;&amp; hostname www.magedu.com 脚本的状态返回值：默认是脚本执行的最后一条命令的返回值；自定义状态退出状态码:exit [n]：n为自己指定的状态码；注意：SHELL进程遇到exit时，即会终止，因此整个脚本执行即为结束。 向脚本传递参数位置参数变量myscript.sh引用方式：$1,$2,$3…$10,$11…轮替：shift [n]: 位置参数轮替： 1234#!/bin/bashfile1_lines=$(grep \"^$\" $1 | wc -l)file2_lines=$(grep \"^$\" $2 | wc -l)echo \"Total blank lines: $[$file1_lines+$file2_lines]\" 特殊变量：1234$0:脚本文件路径本身;$#:脚本参数的个数；$*:所有参数 （分割为多个字符串）$@:所有参数 （合并为一个字符串） [ $# -lt 2 ] &amp;&amp; echo &quot;At least two files&quot; &amp;&amp; exit 1如果参数个数小于2个，提示至少需要2个参数，并退出，状态码1 过程式编程语言的代码执行顺序：顺序执行： 逐条执行；选择执行： 代码有一个分支： 条件满足时才会执行； 两个或以上的分支：只会执行其中一个满足条件的分支；循环执行： 某代码片段（循环体）要执行0、1或者多个来回；选择执行：单分支的if语句：if 测试条件then 代码分支fi 双分支的if语句if 测试条件；then 条件为真时执行的分支else 条件为假时执行的分支fi 示例： 通过参数传递一个用户名给脚本，此用户不存在时，则添加之； 1234567891011#!/bin/bash#[ $# -lt 1 ] &amp;&amp; echo \"At least one username.\" &amp;&amp; exit 1if ! grep \"^$1\\&gt;\" /etc/passwd &amp;&gt; /dev/null; then useradd $1 echo $1 | passwd --stdin $1 &amp;&gt; /dev/null echo \"Add user $1 finished.\"else echo \"user $1 exist.\"fi 练习1： 通过命令行参数给定两个数字，输出其中较大的数值；练习2： 通过命令行参数指定一个用户名，判断其ID号是偶数还是奇数；练习3： 通过命令行参数给定两个文本文件名，如果某文件不存在，则结束脚本执行； 都存在时返回每个文件的行数，并说明其中行数较多的文件；","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Bash","slug":"Bash","permalink":"http://yoursite.com/tags/Bash/"},{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"}]},{"title":"磁盘和文件系统","slug":"1-磁盘和文件系统","date":"2020-05-06T05:22:01.000Z","updated":"2020-05-06T13:58:39.395Z","comments":true,"path":"2020/05/06/1-磁盘和文件系统/","link":"","permalink":"http://yoursite.com/2020/05/06/1-%E7%A3%81%E7%9B%98%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"机械硬盘物理参数数据接口硬盘按数据接口不同，大致分为ATA（又称IDE）和SATA以及SCSI和SAS。接口速度不是实际硬盘数据传输的速度，当前普通硬盘的实际数据传输速度一般不会超过300MB/s。 ATA全称Advanced Technology Attachment，是用传统的40-pin并口数据线连接主板与硬盘的，接口速度最大为133MB/s，因为并口线的抗干扰性太差，且排线占用空间较大，不利电脑内部散热，已逐渐被SATA所取代。 SATA全称Serial ATA，也就是使用串口的ATA接口，特点是抗干扰性强，对数据线的要求比ATA低很多，且支持热插拔等功能。SATA-II的接口速度为300MiB/s，而新的SATA-III标准可达到600MiB/s的传输速度。SATA的数据线也比ATA的细得多，有利于机箱内的空气流通，整理线材也比较方便。 SCSI全称Small Computer System Interface（小型机系统接口），经历多代的发展，从早期的SCSI-II，到当前的Ultra320 SCSI以及Fiber-Channel（光纤通道），接口型式也多种多样。SCSI硬盘广为工作站级个人电脑以及服务器所使用，因此会使用较为先进的技术，如碟片转速15000rpm的高转速，且资料传输时CPU占用率较低，但是单价也比相同容量的ATA及SATA硬盘更加昂贵。 SAS全称Serial Attached SCSI，是新一代的SCSI技术，可兼容SATA硬盘，都是采取序列式技术以获得更高的传输速度，可达到12Gb/s。此外也透过缩小连接线改善系统内部空间等。 此外，由于SAS硬盘可以与SATA硬盘共享同样的背板，因此在同一个SAS存储系统中，可以用SATA硬盘来取代部分昂贵的SAS硬盘，节省整体的存储成本。但SATA存储系统并不能连接SAS硬盘。 FC全称Fibre Channel（光纤通道接口），拥有此接口的硬盘在使用光纤联接时具有热插拔性、高速带宽（4Gb/s或10Gb/s）、远程连接等特点；内部传输速率也比普通硬盘更高。但其价格高昂，因此FC接口通常只用于高端服务器领域。 电源接口3.5寸台式机硬盘：ATA接口的硬盘一般使用D形4针电源接口（俗称“大4pin”），由Molex公司设计并持有专利；SATA硬盘则使用SATA电源线。2.5寸的笔记本电脑硬盘，可直接由数据口供电，不需要额外的电源接口。在插上外接的便携式硬盘盒之后，由计算机外部的USB接口提供电力来源，而单个USB接口供电约为4~5V 500mA，若移动硬盘盒用电需求较高，有时需要接上两个USB接口才能使用，否则，需要外接电源供电。但如今多数新型硬盘盒（使用2.5寸或以下硬盘）已可方便地使用单个USB口供电。 避免故障硬盘碟片转速极快，与碟片的距离极小；因此硬盘内部是无尘状态，硬盘有过滤器过滤进入硬盘的空气。为了避免磁头碰撞碟片，厂商设计出各种保护方法；当前硬盘对于地震有很好的防护力（1990年代的一些硬盘，若在使用中碰到略大的地震，就很可能损坏），防摔能力也大幅进步，电源关闭及遇到较大震动时磁头会立刻移到安全区（近期的硬盘也开始防范突然断电的情况）；而许多笔记本电脑厂商也开发出各种笔记本电脑结构来加强硬盘的防摔性。但硬盘在通电时耐摔度会降低（旋转逆动性）、也只能温和的移动，许多人也已经养成在关闭硬盘后30秒至一分钟内、不会移动硬盘（及笔记本电脑）的习惯。2010年后氦气封装技术量产，以往的硬盘填充介质为空气，不过容易受到空气影响，因此碟片之间距离要够才行，而氦气的密度比起空气小上许多，且氦气特色就是稳定，使用他来当介质，阻力和震动相对小，因此碟片之间的距离就能缩小，所以同样的空间下能够装下更多的碟片，采用氦气封装的好处除了容量变大外[4]，温度和耗电能够再降低，因此耐用度和稳定性能够再提升。 逻辑结构操作系统对硬盘进行读写时需要用到文件系统把硬盘的扇区组合成簇，并创建文件和树形目录制度，使操作系统对其访问和查找变得容易，这是因为操作系统直接对数目众多的扇区进行寻址会十分麻烦。 尺寸硬盘驱动器的尺寸和用途可分为： 0.85英寸，多用于手机等便携设备中，已无厂商生产。 1英寸（微型硬盘，MicroDrive），多用于数字相机（CF type II接口），已无厂商生产。 1.8英寸，多用于笔记本电脑及外置硬盘盒中，已无厂商生产。 2.5英寸，多用于笔记本电脑及外置硬盘盒中。采用2.5”硬盘的外置硬盘盒一般不需外接电源。 3.5英寸，多用于台式机中。采用3.5”硬盘的外置硬盘盒一般需要外接电源，因为耗电量超过USB的供电上限，一直到USB 3.0问世后获得解决。 5.25英寸，多为早期台式机使用，已无厂商生产。 10.5英寸。 14英寸，NEC DKU800。容量当前硬盘的容量有36GB、40GB、45GB、60GB、75GB、80GB、120GB、150GB、160GB、200GB、250GB、300GB、320GB、400GB、500GB、640GB、750GB、1TB、1.5TB、2TB、2.5TB、3TB、4TB、5TB、6TB、8TB、10TB、12TB、14TB等多种规格转速硬盘每分钟旋转的圈数，单位是rpm（每分钟的转动数），有4200rpm、5400rpm、5900rpm、7200rpm、10000rpm、15000rpm、18000rpm等几种规格。一般来讲转速愈高通常数据传输速率愈好，但同时噪音、耗电量和发热量也较高。缓存主要有2MB、8MB、16MB、32MB、64MB、128MB、256MB等规格。平均寻道时间单位是ms（毫秒），有5.2ms、8.5ms、8.9ms、12ms等规格。内部传输速度包括磁头把数据从盘片读入缓存的速度，以及磁头把数据从缓存写入盘片的速度。可用来评价硬盘的读写速度和整体性能. 一般固态硬盘的输入电压在5V左右，偏差5%以内。一般功耗较低，2.5W左右，电流500mA，这样即使usb2.0接口也能采用。 传输速率 SATA: 6gbps SAS: 6gbps USB: 480MB/s SSD固态硬盘采用SATA、PCI Express、M.2、mSATA、SAS、U.2、ZIF、IDE、CF、CFast等接口。由于价格及存储空间与机械硬盘有巨大差距，固态硬盘无法取代机械式硬盘。损坏时不可挽救 Linux的哲学思想： 一切皆文件设备类型：块文件（block）随机访问，数据交换单位是‘块’字符（character）线性访问，数据交换单位是‘字符’设备文件 FHS/dev 关联至设备的驱动程序：设备的访问入口 设备号：major：主设备号，区分设备类型；用于表明设备所需的驱动程序minor：此设备号，区分同种类型下的不同设备，特定设备的访问入口 mknod 命令:创建块类型和字符类型的特殊文件。 12mknod [option]... NAME TYPE [major minor] -m MODE:创建后的设备文件的访问权限。 磁盘:分区机制IDE /dev/hd[a-z]SCSI,SATA,USB,SAS:/dev/sd[a-z]引用设备的方式：设备文件名、卷标、UUID MBR和GPTMBR446bytes: bootloader64bytes: 分区表，每16bytes标识一个分区，一共只能有4个分区 4主分区 3主1扩展主引导记录（Master Boot Record，缩写：MBR），又叫做主引导扇区，是电脑引导后访问硬盘时所必须要读取的首个扇区，主引导扇区记录着硬盘本身的相关消息以及硬盘各个分割的大小及位置消息，是数据消息的重要入口。如果它受到破坏，硬盘上的基本数据结构消息将会丢失，需要用繁琐的方式试探性的重建数据结构消息后才可能重新访问原先的数据，对于那些扇区为512位组的磁盘，MBR分割表不支持容量大于2.2TB（2.2×1012字节）的分割。 GPT全局唯一标识分区表（GUID Partition Table，缩写：GPT）是一个实体硬盘的分区表的结构布局的标准。它是可扩展固件接口（EFI）标准（被Intel用于替代个人计算机的BIOS）的一部分。GPT分配64bits给逻辑块地址，因而使得最大分区大小在264-1个扇区成为了可能。对于每个扇区大小为512字节的磁盘，那意味着可以有9.4ZB（9.4 x 1021字节）或8 ZiB-512字节（9,444,732,965,739,290,426,880字节或 18,446,744,073,709,551,615（264-1）个扇区x 512（29）字节每扇区）。 fdisk123456789fdisk -l fdisk device n: new d: del t: modify w: save q: without save quit m: help p: print 显示内核已识别的所有分区: 1234567891011root@testlab:~# cat &#x2F;proc&#x2F;partitions major minor #blocks name 8 16 20971520 sdb 8 17 20970479 sdb1 8 0 20971520 sda 8 1 748544 sda1 8 2 1 sda2 8 5 20219904 sda5 252 0 19214336 dm-0 252 1 999424 dm-1 使内核重读分区centOS5: partprobe [device]centOS6,7: partx -a [device] (有时需要两次)parted: GNU Parted 是创建和处理分区表的程序。GParted 是 GUI 前端。sfdisk: Partition table manipulator for Linuxcfdisk: Curses based disk partition table manipulator for Linux 创建文件系统磁盘格式化格式化是指对磁盘或磁盘中的分区（partition）进行初始化的一种操作，这种操作通常会导致现有的磁盘或分区中所有的文件被清除。格式化通常分为低级格式化和高级格式化。如果没有特别指明，对硬盘的格式化通常是指高级格式化，而对软盘的格式化则通常同时包括这两者。 低级格式化被用于指代对磁盘进行划分柱面、磁道、扇区的操作。高级格式化又称逻辑格式化，它是指根据用户选定的文件系统（如FAT12、FAT16、FAT32、exFAT、NTFS、EXT2、EXT3等），在磁盘的特定区域写入特定数据，以达到初始化磁盘或磁盘分区、清除原磁盘或磁盘分区中所有文件的一个操作。高级格式化包括对主引导记录中分区表相应区域的重写、根据用户选定的文件系统，在分区中划出一片用于存放文件分配表、目录表等用于文件管理的磁盘空间，以便用户使用该分区管理文件。 inodeinode: (index node)是指在许多“类Unix文件系统”中的一种数据结构，用于描述 文件系统对象（包括文件、目录、设备文件、socket、管道, 等等）。每个inode保存了 文件系统对象数据 的属性和磁盘块位置。文件系统对象属性 包含了各种元数据（如：最后修改时间） ，也包含用户组（owner ）和权限数据。 文件系统创建（格式化）时，就把存储区域分为两大连续的存储区域。一个用来保存文件系统对象的元信息数据，这是由inode组成的表，每个inode默认是256字节或者128字节。另一个用来保存“文件系统对象”的内容数据，划分为512字节的扇区，以及由8个扇区组成的4K字节的块。块是读写时的基本单位。一个文件系统的inode的总数是固定的。这限制了该文件系统所能存储的文件系统对象的总数目。典型的实现下，所有inode占用了文件系统1%左右的存储容量。 POSIX inode123456789101112POSIX标准强制规范了文件系统的行为。每个“文件系统对象”必须具有：以字节为单位表示的文件大小。设备ID，标识容纳该文件的设备。文件所有者的User ID。文件的Group ID文件的模式（mode），确定了文件的类型，以及它的所有者、它的group、其它用户访问此文件的权限。额外的系统与用户标志（flag），用来保护该文件。3个时间戳，记录了inode自身被修改（ctime, inode change time）、文件内容被修改（mtime, modification time）、最后一次访问（atime, access time）的时间。1个链接数，表示有多少个硬链接指向此inode。到文件系统存储位置的指针。通常是1K字节或者2K字节的存储容量为基本单位。使用stat系统调用可以查询一个文件的inode号码及一些元信息。 Linux 的硬链接与软链接链接简单说实际上是一种文件共享的方式，是 POSIX 中的概念，主流文件系统都支持链接文件。你可以将链接简单地理解为 Windows 中常见的快捷方式（或是 OS X 中的替身），Linux 中常用它来解决一些库版本的问题，通常也会将一些目录层次较深的文件链接到一个更易访问的目录中。在这些用途上，我们通常会使用到软链接（也称符号链接）。 从使用的角度讲，两者没有任何区别，都与正常的文件访问方式一样，支持读写，如果是可执行文件的话也可以直接执行。 硬链接： 与普通文件没什么不同，inode 都指向同一个文件在硬盘中的区块有相同的inode,每增加一个硬链接，会使文件inode引用计数增加ln src link 软链接： 保存了其代表的文件的绝对路径，是另外一种文件，在硬盘上有独立的区块，访问时替换自身路径。inode 不同，删除符号连接不影响源文件，但删除原文件会使符号链接无效，建立符号链接不影响文件inode引用计数设备文件： 存储数据指针的空间当中存储的是设备号（major，minor）；bitmap index： 位图索引。ln -s src linkVFS：Virtual File System linux文件系统：ext2,ext3,ext4,xfs,relserfs,brfs 光盘：iso9660 网络文件系统：nfs,cifs 集群：gfs2,ocfs2 内核级分布：ceph windows：vfat,ntfs 伪文件：proc,sysfs,tmpfs,hugepagefs Unix：UFS,FFS,JFS 交换：SWAP 用户空间的分布式：mogliefs,moosefs,glusterfs journal 日志文件系统日志系统：元数据metadata和数据data日志文件系统（英语：Journaling file system）是一种文件系统在发生变化时，先把相关的信息写入一个被称为日志的区域，然后再把变化写入主文件系统的文件系统。在文件系统发生故障（如内核崩溃或突然停电）时，日志文件系统更容易保持一致性，并且可以较快恢复。 对文件系统进行修改时，需要进行很多操作。这些操作可能中途被打断，也就是说，这些操作不是“不可中断”(atomic)的。如果操作被打断，就可能造成文件系统出现不一致的状态。 例如：删除文件时，先要从目录树中移除文件的标示，然后收回文件占用的空间。如果在这两步之间操作被打断，文件占用的空间就无法收回。文件系统认为它是被占用的，但实际上目录树中已经找不到使用它的文件了。 在非日志文件系统中，要检查并修复类似的错误就必须对整个文件系统的数据结构进行检查。一般在挂载文件系统前，操作系统会检查它上次是否被成功卸载，如果没有，就会对其进行检查。如果文件系统很大或者I/O带宽有限，这个操作可能会花费很长时间。为了避免这样的问题，日志文件系统分配了一个称为日志（journal）的区域来提前记录要对文件系统做的更改。在崩溃后，只要读取日志重新执行未完成的操作，文件系统就可以恢复一致。这种恢复是原子的，因为只存在几种情况： 不需要重新执行：这个事务被标记为已经完成 成功重新执行：根据日志，这个事务被重新执行 无法重新执行：这个事务会被撤销，就如同这个事务从来没有发生过 日志本身不完整：事务还没有被完全写入日志，它会被简单忽略日志的三个级别 回写在回写模式中，只有元数据被记录到日志中，数据会被直接写入主文件系统。这种模式能提供较好的性能，不过有较大的风险。例如：在增大文件时，数据还未写入就发生崩溃，那么文件系统恢复后，文件后面就可能出现垃圾数据。 顺序在顺序模式中，只有元数据被记录到日志中，但在日志被标记为提交前，数据会被写入文件系统。在这种模式下，如果在增大文件时，数据还未写入就发生崩溃，那么在恢复时这个事务会被简单的撤销，文件保持原来的状态。 数据 123- 日志完整：这时事务会被重新执行，修改会被提交到主文件系统- 日志不完整：这时主文件系统还未被修改，只需要简单放弃这个事务 常见的日志文件系统 JFS：IBM的 Journaled File System, 最早的日志文件系统[1]。 Ext4/Ext3文件系统：由Ext2文件系统演化而成的日志文件系统，广泛用于Linux系统。 XFS文件系统：广泛用于Linux系统，取代了Ext4。 ReiserFS：用B+树作为数据结构的日志文件系统，在处理小文件时有较好的性能。 Btrfs：用B树作为数据结构，被认为是下一代Linux文件系统[2]。 NTFS：微软的NTFS也是日志文件系统，也是Windows下最常用的文件系统。 HFS+：苹果公司发展的OS X操作系统下主要使用的文件系统。 文件系统管理工具 创建1234567891011mkfs -v -t fs-type deviceext系列专用 mke2fs -t &#123;ext2、ext3、ext4&#125;： 指明文件系统类型 -b &#123;1024 | 2048 | 4096&#125;： 指明文件系统的块大小 -L LABEL： 指明卷标 -j： 创建有日志功能的文件系统ext3； mke2fs -j &#x3D; mke2fs -t ext3 &#x3D; mkfs.ext3 -i 每多少字节创建inode -N 直接指明要给此文件系统创建inode的数量； -O [^]FEATURE: 以指定的特性创建目标文件系统，不加拖字符表示启用，加拖字符表示关闭特性； -m 指定为超级用户保留的文件系统块的百分比。这样可以避免碎片，并允许root拥有的守护程序，默认为5%。 检测和修复12345678910111213fsck: 用于实现文件系统检测的工具；因进程意外中止或者系统崩溃等原因导致定稿操作非正常终止时，可能会造成文件损坏；此时，应该检测并修复文件系统；建议，离线进行（非挂载状态）；e2fsck: 检测ext2&#x2F;3&#x2F;4 文件系统错误e2fsck [option] device -y: 默认对所有问题自动回答yes； -f：及时文件系统处于clean状态，也check一遍；fsck: check and repair a Linux filesystem -t: fslist 指定文件系统类型； -a: 自动修复文件系统，不询问任何问题（请谨慎使用此选项）。 -r: 交互式修复； 查看属性12345678910111213141516dumpe2fs ：显示ext系列文件系统的属性信息； dumpe2fs [-h] devicetune2fs: 查看或者修改ext系列文件系统的某些属性。 tune2fs [option] device -l 查看超级块信息 修改： -j ext2升级为ext3，无损升级，有数据也可升级; -L LABEL: 修改卷标 -m 修改预留块的百分比； -O [^] 开启或者关闭某种特性； -o [^]mount_options：开启或者关闭某种默认挂载选项； acl&#x2F;^acl: 开启或者关闭aclblkid: 查找&#x2F;打印块设备属性 -L: 查找使用此文件系统标签的设备； -k: 列出所有已知的文件系统&#x2F; RAID并退出; 调整文件系统特性123e2label - 更改ext2 &#x2F; ext3 &#x2F; ext4文件系统上的卷标 查看：e2label device 设定：e2label device LABEL CentOS6 如何使用xfs文件系统：联网的话：yum install xfsprogs Swap 文件系统linux 的交换分区必须使用独立的文件系统且文件系统的system ID必须为82；创建Swap设备： 123mkswap [option] device -L LABEL: 指明卷标 -f： 强制 windows无法识别Linux的文件系统；因此，存储设备需要在两=两种系统之间交叉使用时，应该使用fat32（vfat）；mkfs.vfat device 练习1: 练习2:","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"磁盘","slug":"磁盘","permalink":"http://yoursite.com/tags/%E7%A3%81%E7%9B%98/"},{"name":"文件系统","slug":"文件系统","permalink":"http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"name":"ext4","slug":"ext4","permalink":"http://yoursite.com/tags/ext4/"}]},{"title":"Git 和 GitHub 使用入门","slug":"102-Git-和-GitHub-使用入门","date":"2020-05-05T23:03:09.000Z","updated":"2020-05-06T15:16:55.503Z","comments":true,"path":"2020/05/05/102-Git-和-GitHub-使用入门/","link":"","permalink":"http://yoursite.com/2020/05/05/102-Git-%E5%92%8C-GitHub-%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/","excerpt":"","text":"使用常见 Git 命令推送提交到远程仓库使用 git push 将本地分支上的提交推送到远程仓库。git push 命令使用两个参数： 远程命令，如 origin 分支名称，如 master例如：git push &lt;REMOTENAME&gt; &lt;BRANCHNAME&gt;例如，您通常运行 git push origin master 来推送本地更改到在线仓库。 重命名分支要重命名分支，同样使用 git push 命令，但要加上一个或多个参数：新分支的名称。 例如：git push &lt;REMOTENAME&gt; &lt;LOCALBRANCHNAME&gt;:&lt;REMOTEBRANCHNAME&gt;这会将 LOCALBRANCHNAME 推送到 REMOTENAME，但其名称将改为 REMOTEBRANCHNAME。如果仓库的本地副本未同步或“落后于”您推送到的上游分支，您会收到一条消息表示：non-fast-forward updates were rejected。 这意味着您必须检索或“提取”上游更改，然后才可推送本地更改。 推送标记默认情况下，没有其他参数时，git push 会发送所有名称与远程分支相同的匹配分支。要推送单一标记，可以发出与推送分支相同的命令：git push &lt;REMOTENAME&gt; &lt;TAGNAME&gt;要推送所有标记，可以输入命令：git push &lt;REMOTENAME&gt; --tags 删除远程分支或标记删除分支的语法初看有点神秘：git push &lt;REMOTENAME&gt; :&lt;BRANCHNAME&gt; 远程和复刻在克隆您拥有的仓库时，向其提供远程 URL，告知 Git 到何处提取和推送更新。 如果要协作处理原始仓库，可添加新的远程 URL（通常称为 upstream）到本地 Git 克隆：git remote add upstream &lt;THEIR_REMOTE_URL&gt; 从远程仓库获取更改您可以使用常用 Git 命令访问远程仓库。与远程仓库交互时，这些命令非常有用。 clone 和 fetch 用于从仓库的远程 URL 将远程代码下载到您的本地计算机，merge 用于将其他人的工作与您的工作合并在一起，而 pull 是 fetch 和 merge 的组合。 克隆仓库要获取其他用户仓库的完整副本，请使用 git clone，如下所示：git clone https://github.com/USERNAME/REPOSITORY.git将仓库克隆到您的计算机运行 git clone 时，将发生以下操作： 创建名为 repo 的文件夹 将它初始化为 Git 仓库 创建名为 origin 的远程仓库，指向用于克隆的 URL 将所有的仓库文件和提交下载到那里 检出默认分支（通常称为master）对于远程仓库中的每个 foo 分支，在本地仓库中创建相应的远程跟踪分支 refs/remotes/origin/foo。 通常可以将此类远程跟踪分支名称缩写为origin/foo。 从远程仓库获取更改使用 git fetch 可检索其他人完成的新工作。 从仓库获取将会获取所有新的远程跟踪分支和标记，但不会将这些更改合并到您自己的分支中。如果已经有一个本地仓库包含为所需项目设置的远程 URL，您可以在终端使用 git fetch *remotename* 获取所有新信息：git fetch remotename获取远程仓库的更新 合并更改到本地分支合并可将您的本地更改与其他人所做的更改组合起来。 通常将远程跟踪分支（即从远程仓库获取的分支）与您的本地分支进行合并： 12git merge remotename&#x2F;branchname将在线更新与您的本地工作进行合并 从远程仓库拉取更改git pull 是在同一个命令中完成 git fetch 和 git merge 的便捷方式。 12git pull remotename branchname获取在线更新并将其与您的本地工作进行合并 管理远程仓库 添加远程git remote add 命令使用两个参数： 远程命令，如 origin 远程 URL，如 https://github.com/user/repo.git 重命名远程git remote rename 命令使用两个参数： 现有的远程名称，例如 origin 远程的新名称，例如 destination 删除远程git remote rm 命令使用一个参数：远程名称，例如 destination 将子文件夹拆分成新仓库 在 Git 中设置用户名 全局设置： git config --global user.name &quot;Mona Lisa&quot; 为一个仓库设置 Git 用户名 git config user.name &quot;Mona Lisa&quot; 在 Git 中设置您的提交电子邮件地址 git config --global user.email &quot;email@example.com&quot; 在 Git 中缓存 GitHub 密码如果使用 HTTPS 克隆 GitHub 仓库 windows: git config --global credential.helper wincred linux: git config --global credential.helper cache 更改默认的密码缓存时限: git config --global credential.helper &#39;cache --timeout=3600&#39;(以秒为单位) 为什么 Git 总是询问我的密码？如果 Git 在您每次尝试与 GitHub 交互时均提示输入用户名和密码，则您可能为仓库使用的是 HTTPS 克隆 URL。 新增 SSH 密钥到 GitHub 帐户 将 SSH 密钥复制到剪贴板 ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; Copy your .ssh/id_rsa.pub 在任何页面的右上角，单击您的个人资料照片，然后单击 Settings（设置）。 在用户设置侧边栏中，单击 SSH and GPG keys（SSH 和 GPG 密钥）。 单击 New SSH key（新 SSH 密钥）或 Add SSH key（添加 SSH 密钥）。 在 “Title”（标题）字段中，为新密钥添加描述性标签。 例如，如果您使用的是个人 Mac，此密钥名称可能是 “Personal MacBook Air”。 将密钥粘贴到 “Key”（密钥）字段。 单击 Add SSH key（添加 SSH 密钥）。 如有提示，请确认您的 GitHub Enterprise 密码。 参考：使用 SSH 连接到 GitHub","categories":[],"tags":[]},{"title":"Text to AscII Art","slug":"103-Text-to-AscII-Art","date":"2020-05-05T23:02:19.000Z","updated":"2020-05-06T15:16:55.503Z","comments":true,"path":"2020/05/05/103-Text-to-AscII-Art/","link":"","permalink":"http://yoursite.com/2020/05/05/103-Text-to-AscII-Art/","excerpt":"","text":"FigletToiletfiglet123Usage: figlet [ -cklnoprstvxDELNRSWX ] [ -d fontdirectory ] [ -f fontfile ] [ -m smushmode ] [ -w outputwidth ] [ -C controlfile ] [ -I infocode ] [ message ] toilet1234567891011121314151617181920-f, --font &lt;name&gt; select the font -d, --directory &lt;dir&gt; specify font directory -s, -S, -k, -W, -o render mode (default, force smushing, kerning, full width, overlap) -w, --width &lt;width&gt; set output width -t, --termwidth adapt to terminal's width -F, --filter &lt;filters&gt; apply one or several filters to the text -F, --filter list list available filters --gay rainbow filter (same as -F gay) --metal metal filter (same as -F metal) -E, --export &lt;format&gt; select export format -E, --export list list available export formats --irc output IRC colour codes (same as -E irc) --html output an HTML document (same as -E html) -h, --help display this help and exit -I, --infocode &lt;code&gt; print FIGlet-compatible infocode -v, --version output version information and exitUsage: toilet [ -hkostvSW ] [ -d fontdirectory ] [ -f fontfile ] [ -F filter ] [ -w outputwidth ] [ -I infocode ] [ -E format ] [ message ] 生成艺术字1234567root@testlab:/usr/share/figlet/fonts# figlet -f Graffiti.flf jack __ __ |__|____ ____ | | __ | \\__ \\ _/ ___\\| |/ / | |/ __ \\\\ \\___| &lt; /\\__| (____ /\\___ &gt;__|_ \\\\______| \\/ \\/ \\/ 1234567root@testlab:~# figlet -f /usr/share/figlet/fonts/Graffiti.flf \"A man from Mars!\" -t _____ _____ _____ ._. / _ \\ _____ _____ ____ _/ ____\\______ ____ _____ / \\ _____ _______ _____| | / /_\\ \\ / \\\\__ \\ / \\ \\ __\\\\_ __ \\/ _ \\ / \\ / \\ / \\\\__ \\\\_ __ \\/ ___/ |/ | \\ | Y Y \\/ __ \\| | \\ | | | | \\( &lt;_&gt; ) Y Y \\ / Y \\/ __ \\| | \\/\\___ \\ \\|\\____|__ / |__|_| (____ /___| / |__| |__| \\____/|__|_| / \\____|__ (____ /__| /____ &gt;__ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/","categories":[],"tags":[]},{"title":"文件系统的挂载和使用","slug":"2-文件系统的挂载和使用","date":"2020-05-05T22:59:43.000Z","updated":"2020-05-06T15:16:55.503Z","comments":true,"path":"2020/05/05/2-文件系统的挂载和使用/","link":"","permalink":"http://yoursite.com/2020/05/05/2-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8C%82%E8%BD%BD%E5%92%8C%E4%BD%BF%E7%94%A8/","excerpt":"","text":"文件系统的使用 挂载和卸载mount 和 umount根文件系统以为的文件系统要想能够被访问,必须通过 “关联” 至根文件系统的某个目录上，此关联即为 “挂载” ；此目录即为 “挂载点” ；mount_point：用于作为另一个文件系统的访问入口； 事先存在 应该使用未被或者不会被其他进程使用到的目录； 挂载点下原有的文件会被隐藏；（最好是使用原来是空的目录）；mount命令：1234567891011121314151617181920212223242526mount [-fnrsvw] [-t vfstype] [-o options] device dir -r： readonly，只读挂载（比如光盘）； -w: read and write 读写挂载； -n： 默认情况下，设备挂载或者卸载的操作会同步更新至&#x2F;etc&#x2F;mtab文件中，-n用于禁止此特性； -t vfstype：指明要挂载的设备上的文件系统的类型，多数情况下可自动识别，mount会通过blkid来判断要挂载的设备的文件系统类型； -L LABEL： 挂载是以卷标的方式指明设备； -U UUID DIR: 通过UUID挂载设备； -o: 挂载选项； sync&#x2F;async: 同步&#x2F;异步操作；（异步是先写入内存，随后写入磁盘，性能好，但安全行肯定没有同步安全） atime&#x2F;noatime: 每个文件或目录被访问时是否立即更新其访问时间戳； diratime&#x2F;nodiratime: 每个目录被访问时是否立即更新其访问时间戳； remount: 重新挂载 acl: 支持使用acl功能； mount -o acl DEVICE DIR tune2fs -o acl device ro： 只读 rw： 读写 dev&#x2F;nodev： 此设备上是否允许创建设备文件； exec&#x2F;noexec： 是否允许运行此设备上的文件； auto&#x2F;noauto： 是否允许自动运行； user&#x2F;nouser： 是否允许普通用户挂载此文件系统； suid&#x2F;nosuid： 是否允许程序文件上的suid和sgid特殊权限生效； defaults： 使用默认选项：rw，suid，dev，exec，auto，nouser和async。 请注意，所有默认安装选项的实际设置取决于内核和文件系统类型。技巧：可以实现将目录绑定至另一个目录上，作为其临时访问入口mount --bind 源目录 目标目录 mount -r /dev/cdrom mount_point光盘设备一般为： /dev/cdrom /dev/dvd /dev/sr0挂载U盘： 事先识别U盘的设备文件：挂载本地回环设备； mount -o loop /PATH/TO?SOME_LOOP_FILE MOUNT_POINT 例如ISO镜像文件查看当前已挂载的设备: mount cat /proc/mounts cat /etc/mtab 查看挂载设备被哪些进程所占用fuser -v MOUNT_POINT lsof MOUNT_POINT终止所有正在访问某挂载点的进程：fuser -km MOUNT_POINTumount命令：umount device | dir注意：正在被进程访问到的挂载点无法被卸载： 交换分区mkswap 启用：swapon -a 所有swap文件；(定义在fstab文件中的swap设备)； 禁用：swapoff swapoff DEVICE设定除根文件系统以外的其他文件系统能够开机时自动挂载： /etc/fstab文件 要挂载的设备 挂载点 文件系统类型 挂载选项 转储频率（备份） 自检次序 设备文件 swap为swap defaults 0从不 0不自检 LABEL acl 1每天 1，首先自检，通常根是1 UUID noatime 2隔天 2 次级自检 伪文件系统proc，sysfs，tmpfs noexec mount -a： 可自动挂载定义在此文件中的所有支持的自动挂载的设备 两个命令：du：估计文件空间使用率; -h: 以人类可读的格式打印尺寸（例如1K 234M 2G） -s: 对于目录，不包括子目录的大小; df：报告文件系统磁盘空间使用情况; -l: 将列表限制为本地文件系统; -h: 以1024的幂为单位的打印尺寸（例如1023M） -i: 列出索引节点信息而不是块使用情况; -a: 包括伪，重复，不可访问的文件系统;","categories":[],"tags":[]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"磁盘","slug":"磁盘","permalink":"http://yoursite.com/tags/%E7%A3%81%E7%9B%98/"},{"name":"文件系统","slug":"文件系统","permalink":"http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"name":"RAID","slug":"RAID","permalink":"http://yoursite.com/tags/RAID/"},{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"版本控制","slug":"版本控制","permalink":"http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"},{"name":"Bash","slug":"Bash","permalink":"http://yoursite.com/tags/Bash/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"},{"name":"ext4","slug":"ext4","permalink":"http://yoursite.com/tags/ext4/"}]}